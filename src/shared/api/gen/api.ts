/* tslint:disable */
/* eslint-disable */
/**
 * Admin
 * ADMIN API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CityEnum
 */
export interface CityEnum {
}
/**
 * Pydantic schema for uploading image to server side.
 * @export
 * @interface GalleryInSchema
 */
export interface GalleryInSchema {
    /**
     * 
     * @type {any}
     * @memberof GalleryInSchema
     */
    'images': any;
}
/**
 * Pydantic schema for return image to client side.
 * @export
 * @interface GalleryMaxOutSchema
 */
export interface GalleryMaxOutSchema {
    /**
     * 
     * @type {any}
     * @memberof GalleryMaxOutSchema
     */
    'images': any;
    /**
     * 
     * @type {any}
     * @memberof GalleryMaxOutSchema
     */
    'id'?: any;
}
/**
 * Pydantic schema for return image to client side.
 * @export
 * @interface GalleryMinOutSchema
 */
export interface GalleryMinOutSchema {
    /**
     * 
     * @type {any}
     * @memberof GalleryMinOutSchema
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof GalleryMinOutSchema
     */
    'images': any;
}
/**
 * Pydantic schema for uploading image to server side.
 * @export
 * @interface ImageInSchema
 */
export interface ImageInSchema {
    /**
     * 
     * @type {any}
     * @memberof ImageInSchema
     */
    'alt': any;
}
/**
 * Pydantic schema for return image to client side.
 * @export
 * @interface ImageOutSchema
 */
export interface ImageOutSchema {
    /**
     * 
     * @type {any}
     * @memberof ImageOutSchema
     */
    'image': any;
    /**
     * 
     * @type {any}
     * @memberof ImageOutSchema
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof ImageOutSchema
     */
    'alt': any;
}
/**
 * 
 * @export
 * @interface LangEnum
 */
export interface LangEnum {
}
/**
 * Pydantic schema for return message to client side.  Purpose of this schema just say that operation has been successful or failed
 * @export
 * @interface LoginResponseSchema
 */
export interface LoginResponseSchema {
    /**
     * 
     * @type {any}
     * @memberof LoginResponseSchema
     */
    'email': any;
    /**
     * 
     * @type {any}
     * @memberof LoginResponseSchema
     */
    'refresh': any;
    /**
     * 
     * @type {any}
     * @memberof LoginResponseSchema
     */
    'access': any;
    /**
     * 
     * @type {any}
     * @memberof LoginResponseSchema
     */
    'admin': any;
}
/**
 * Pydantic schema for return message to client side.  Purpose of this schema just say that operation has been successful or failed
 * @export
 * @interface LoginSchema
 */
export interface LoginSchema {
    /**
     * 
     * @type {any}
     * @memberof LoginSchema
     */
    'password': any;
    /**
     * 
     * @type {any}
     * @memberof LoginSchema
     */
    'email': any;
}
/**
 * Pydantic schema for MailTemplate.  Purpose of this schema to return mail template data
 * @export
 * @interface MailTemplateOutSchema
 */
export interface MailTemplateOutSchema {
    /**
     * 
     * @type {any}
     * @memberof MailTemplateOutSchema
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof MailTemplateOutSchema
     */
    'name': any;
}
/**
 * Pydantic schema for mailing.  Purpose of this schema to make mailing
 * @export
 * @interface MailingInSchema
 */
export interface MailingInSchema {
    /**
     * 
     * @type {any}
     * @memberof MailingInSchema
     */
    'users'?: any;
    /**
     * 
     * @type {any}
     * @memberof MailingInSchema
     */
    'temp_id': any;
}
/**
 * Pydantic schema for return message to client side.  Purpose of this schema just say that operation has been successful or failed
 * @export
 * @interface MessageOutSchema
 */
export interface MessageOutSchema {
    /**
     * 
     * @type {any}
     * @memberof MessageOutSchema
     */
    'detail': any;
}
/**
 * Pydantic schema for getting task info.  Purpose of this schema to get task info
 * @export
 * @interface TaskInfoOutSchema
 */
export interface TaskInfoOutSchema {
    /**
     * 
     * @type {any}
     * @memberof TaskInfoOutSchema
     */
    'progress': any;
}
/**
 * 
 * @export
 * @interface TokenRefreshInputSchema
 */
export interface TokenRefreshInputSchema {
    /**
     * 
     * @type {any}
     * @memberof TokenRefreshInputSchema
     */
    'refresh': any;
}
/**
 * 
 * @export
 * @interface TokenRefreshOutputSchema
 */
export interface TokenRefreshOutputSchema {
    /**
     * 
     * @type {any}
     * @memberof TokenRefreshOutputSchema
     */
    'refresh': any;
    /**
     * 
     * @type {any}
     * @memberof TokenRefreshOutputSchema
     */
    'access': any;
}
/**
 * 
 * @export
 * @interface UserFieldsEnum
 */
export interface UserFieldsEnum {
}
/**
 * Pydantic schema for User.  Purpose of this schema to return user\'s personal data
 * @export
 * @interface UserOutSchema
 */
export interface UserOutSchema {
    /**
     * 
     * @type {any}
     * @memberof UserOutSchema
     */
    'city_display': any;
    /**
     * 
     * @type {any}
     * @memberof UserOutSchema
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserOutSchema
     */
    'first_name'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserOutSchema
     */
    'last_name'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserOutSchema
     */
    'nickname'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserOutSchema
     */
    'city'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserOutSchema
     */
    'man'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserOutSchema
     */
    'phone_number'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserOutSchema
     */
    'email': any;
    /**
     * 
     * @type {any}
     * @memberof UserOutSchema
     */
    'address'?: any;
    /**
     * Указывает, что пользователь имеет все права без явного их назначения.
     * @type {any}
     * @memberof UserOutSchema
     */
    'is_superuser'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserOutSchema
     */
    'birthday'?: any;
}
/**
 * Pydantic schema for User.  Purpose of this schema to get user\'s personal data for registration
 * @export
 * @interface UserRegisterSchema
 */
export interface UserRegisterSchema {
    /**
     * 
     * @type {any}
     * @memberof UserRegisterSchema
     */
    'first_name'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserRegisterSchema
     */
    'last_name'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserRegisterSchema
     */
    'nickname'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserRegisterSchema
     */
    'man'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserRegisterSchema
     */
    'phone_number'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserRegisterSchema
     */
    'email': any;
    /**
     * 
     * @type {any}
     * @memberof UserRegisterSchema
     */
    'address'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserRegisterSchema
     */
    'city'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserRegisterSchema
     */
    'birthday'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserRegisterSchema
     */
    'password1': any;
    /**
     * 
     * @type {any}
     * @memberof UserRegisterSchema
     */
    'password2': any;
}
/**
 * Pydantic schema for update User.  Purpose of this schema to get user\'s personal data for updating
 * @export
 * @interface UserUpdateSchema
 */
export interface UserUpdateSchema {
    /**
     * 
     * @type {any}
     * @memberof UserUpdateSchema
     */
    'first_name'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserUpdateSchema
     */
    'last_name'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserUpdateSchema
     */
    'nickname'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserUpdateSchema
     */
    'man'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserUpdateSchema
     */
    'phone_number'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserUpdateSchema
     */
    'email'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserUpdateSchema
     */
    'address'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserUpdateSchema
     */
    'city'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserUpdateSchema
     */
    'birthday'?: any;
}
/**
 * Pydantic schema for Users. Purpose of this schema to return all users with pagination
 * @export
 * @interface UsersAllSchema
 */
export interface UsersAllSchema {
    /**
     * 
     * @type {any}
     * @memberof UsersAllSchema
     */
    'items': any;
    /**
     * 
     * @type {any}
     * @memberof UsersAllSchema
     */
    'count': any;
    /**
     * 
     * @type {any}
     * @memberof UsersAllSchema
     */
    'next': any;
    /**
     * 
     * @type {any}
     * @memberof UsersAllSchema
     */
    'previous': any;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get user\'s new access token by provided refresh token.  Please provide:   - **Request body**  provide here refresh token  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Refresh Token
         * @param {TokenRefreshInputSchema} tokenRefreshInputSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _2116e4e8ControllerRefreshToken: async (tokenRefreshInputSchema: TokenRefreshInputSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenRefreshInputSchema' is not null or undefined
            assertParamExists('_2116e4e8ControllerRefreshToken', 'tokenRefreshInputSchema', tokenRefreshInputSchema)
            const localVarPath = `/api/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenRefreshInputSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint gets cities for user to choose. Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Cities
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _3a34ec1eControllerGetCities: async (acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/cities/choices/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **403**: Error: Forbidden.         Причини:       1) Паролі не співпадають       2) Пароль повинен бути:          * Принаймні одна велика літера          * Принаймні одна мала літера          * Принаймні одна цифра          * Принаймні один спеціальний символ із набору ?!@%^&-          * Мінімальна довжина 8 символів       3) Введено некоректний номер телефону       4) Ім\'я та прізвище повинно починатися з великої літери\"          (наступні маленькі), доступна кирилиця,          доступні спецсимволи(\'-)   - **409**: Error: Conflict.         Причини:       1) Ця електронна адреса вже використовується   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Register
         * @param {UserRegisterSchema} userRegisterSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _6bd64293ControllerRegister: async (userRegisterSchema: UserRegisterSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRegisterSchema' is not null or undefined
            assertParamExists('_6bd64293ControllerRegister', 'userRegisterSchema', userRegisterSchema)
            const localVarPath = `/api/auth/register/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRegisterSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user\'s personal data by token.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.     - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get My Profile
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _91ec46c6ControllerGetMyProfile: async (acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/my-profile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user\'s token by provided credentials.  Please provide:   - **Request body**  data with credentials of user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Obtain Token
         * @param {LoginSchema} loginSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cec1ba17ControllerObtainToken: async (loginSchema: LoginSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginSchema' is not null or undefined
            assertParamExists('cec1ba17ControllerObtainToken', 'loginSchema', loginSchema)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user\'s personal data by token.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.     - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Update My Profile
         * @param {UserUpdateSchema} userUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        e27424f6ControllerUpdateMyProfile: async (userUpdateSchema: UserUpdateSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUpdateSchema' is not null or undefined
            assertParamExists('e27424f6ControllerUpdateMyProfile', 'userUpdateSchema', userUpdateSchema)
            const localVarPath = `/api/auth/my-profile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Get user\'s new access token by provided refresh token.  Please provide:   - **Request body**  provide here refresh token  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Refresh Token
         * @param {TokenRefreshInputSchema} tokenRefreshInputSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _2116e4e8ControllerRefreshToken(tokenRefreshInputSchema: TokenRefreshInputSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenRefreshOutputSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._2116e4e8ControllerRefreshToken(tokenRefreshInputSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint gets cities for user to choose. Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Cities
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _3a34ec1eControllerGetCities(acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<any>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._3a34ec1eControllerGetCities(acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **403**: Error: Forbidden.         Причини:       1) Паролі не співпадають       2) Пароль повинен бути:          * Принаймні одна велика літера          * Принаймні одна мала літера          * Принаймні одна цифра          * Принаймні один спеціальний символ із набору ?!@%^&-          * Мінімальна довжина 8 символів       3) Введено некоректний номер телефону       4) Ім\'я та прізвище повинно починатися з великої літери\"          (наступні маленькі), доступна кирилиця,          доступні спецсимволи(\'-)   - **409**: Error: Conflict.         Причини:       1) Ця електронна адреса вже використовується   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Register
         * @param {UserRegisterSchema} userRegisterSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _6bd64293ControllerRegister(userRegisterSchema: UserRegisterSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._6bd64293ControllerRegister(userRegisterSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get user\'s personal data by token.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.     - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get My Profile
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _91ec46c6ControllerGetMyProfile(acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._91ec46c6ControllerGetMyProfile(acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get user\'s token by provided credentials.  Please provide:   - **Request body**  data with credentials of user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Obtain Token
         * @param {LoginSchema} loginSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cec1ba17ControllerObtainToken(loginSchema: LoginSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cec1ba17ControllerObtainToken(loginSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get user\'s personal data by token.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.     - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Update My Profile
         * @param {UserUpdateSchema} userUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async e27424f6ControllerUpdateMyProfile(userUpdateSchema: UserUpdateSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.e27424f6ControllerUpdateMyProfile(userUpdateSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Get user\'s new access token by provided refresh token.  Please provide:   - **Request body**  provide here refresh token  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Refresh Token
         * @param {TokenRefreshInputSchema} tokenRefreshInputSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _2116e4e8ControllerRefreshToken(tokenRefreshInputSchema: TokenRefreshInputSchema, acceptLanguage?: any, options?: any): AxiosPromise<TokenRefreshOutputSchema> {
            return localVarFp._2116e4e8ControllerRefreshToken(tokenRefreshInputSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint gets cities for user to choose. Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Cities
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _3a34ec1eControllerGetCities(acceptLanguage?: any, options?: any): AxiosPromise<Array<any>> {
            return localVarFp._3a34ec1eControllerGetCities(acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **403**: Error: Forbidden.         Причини:       1) Паролі не співпадають       2) Пароль повинен бути:          * Принаймні одна велика літера          * Принаймні одна мала літера          * Принаймні одна цифра          * Принаймні один спеціальний символ із набору ?!@%^&-          * Мінімальна довжина 8 символів       3) Введено некоректний номер телефону       4) Ім\'я та прізвище повинно починатися з великої літери\"          (наступні маленькі), доступна кирилиця,          доступні спецсимволи(\'-)   - **409**: Error: Conflict.         Причини:       1) Ця електронна адреса вже використовується   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Register
         * @param {UserRegisterSchema} userRegisterSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _6bd64293ControllerRegister(userRegisterSchema: UserRegisterSchema, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp._6bd64293ControllerRegister(userRegisterSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user\'s personal data by token.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.     - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get My Profile
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _91ec46c6ControllerGetMyProfile(acceptLanguage?: any, options?: any): AxiosPromise<UserOutSchema> {
            return localVarFp._91ec46c6ControllerGetMyProfile(acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user\'s token by provided credentials.  Please provide:   - **Request body**  data with credentials of user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Obtain Token
         * @param {LoginSchema} loginSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cec1ba17ControllerObtainToken(loginSchema: LoginSchema, acceptLanguage?: any, options?: any): AxiosPromise<LoginResponseSchema> {
            return localVarFp.cec1ba17ControllerObtainToken(loginSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user\'s personal data by token.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.     - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Update My Profile
         * @param {UserUpdateSchema} userUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        e27424f6ControllerUpdateMyProfile(userUpdateSchema: UserUpdateSchema, acceptLanguage?: any, options?: any): AxiosPromise<UserOutSchema> {
            return localVarFp.e27424f6ControllerUpdateMyProfile(userUpdateSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _2116e4e8ControllerRefreshToken operation in AuthApi.
 * @export
 * @interface AuthApi2116e4e8ControllerRefreshTokenRequest
 */
export interface AuthApi2116e4e8ControllerRefreshTokenRequest {
    /**
     * 
     * @type {TokenRefreshInputSchema}
     * @memberof AuthApi2116e4e8ControllerRefreshToken
     */
    readonly tokenRefreshInputSchema: TokenRefreshInputSchema

    /**
     * 
     * @type {any}
     * @memberof AuthApi2116e4e8ControllerRefreshToken
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for _3a34ec1eControllerGetCities operation in AuthApi.
 * @export
 * @interface AuthApi3a34ec1eControllerGetCitiesRequest
 */
export interface AuthApi3a34ec1eControllerGetCitiesRequest {
    /**
     * 
     * @type {any}
     * @memberof AuthApi3a34ec1eControllerGetCities
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for _6bd64293ControllerRegister operation in AuthApi.
 * @export
 * @interface AuthApi6bd64293ControllerRegisterRequest
 */
export interface AuthApi6bd64293ControllerRegisterRequest {
    /**
     * 
     * @type {UserRegisterSchema}
     * @memberof AuthApi6bd64293ControllerRegister
     */
    readonly userRegisterSchema: UserRegisterSchema

    /**
     * 
     * @type {any}
     * @memberof AuthApi6bd64293ControllerRegister
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for _91ec46c6ControllerGetMyProfile operation in AuthApi.
 * @export
 * @interface AuthApi91ec46c6ControllerGetMyProfileRequest
 */
export interface AuthApi91ec46c6ControllerGetMyProfileRequest {
    /**
     * 
     * @type {any}
     * @memberof AuthApi91ec46c6ControllerGetMyProfile
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for cec1ba17ControllerObtainToken operation in AuthApi.
 * @export
 * @interface AuthApiCec1ba17ControllerObtainTokenRequest
 */
export interface AuthApiCec1ba17ControllerObtainTokenRequest {
    /**
     * 
     * @type {LoginSchema}
     * @memberof AuthApiCec1ba17ControllerObtainToken
     */
    readonly loginSchema: LoginSchema

    /**
     * 
     * @type {any}
     * @memberof AuthApiCec1ba17ControllerObtainToken
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for e27424f6ControllerUpdateMyProfile operation in AuthApi.
 * @export
 * @interface AuthApiE27424f6ControllerUpdateMyProfileRequest
 */
export interface AuthApiE27424f6ControllerUpdateMyProfileRequest {
    /**
     * 
     * @type {UserUpdateSchema}
     * @memberof AuthApiE27424f6ControllerUpdateMyProfile
     */
    readonly userUpdateSchema: UserUpdateSchema

    /**
     * 
     * @type {any}
     * @memberof AuthApiE27424f6ControllerUpdateMyProfile
     */
    readonly acceptLanguage?: any
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Get user\'s new access token by provided refresh token.  Please provide:   - **Request body**  provide here refresh token  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Refresh Token
     * @param {AuthApi2116e4e8ControllerRefreshTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public _2116e4e8ControllerRefreshToken(requestParameters: AuthApi2116e4e8ControllerRefreshTokenRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration)._2116e4e8ControllerRefreshToken(requestParameters.tokenRefreshInputSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint gets cities for user to choose. Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Cities
     * @param {AuthApi3a34ec1eControllerGetCitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public _3a34ec1eControllerGetCities(requestParameters: AuthApi3a34ec1eControllerGetCitiesRequest = {}, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration)._3a34ec1eControllerGetCities(requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **403**: Error: Forbidden.         Причини:       1) Паролі не співпадають       2) Пароль повинен бути:          * Принаймні одна велика літера          * Принаймні одна мала літера          * Принаймні одна цифра          * Принаймні один спеціальний символ із набору ?!@%^&-          * Мінімальна довжина 8 символів       3) Введено некоректний номер телефону       4) Ім\'я та прізвище повинно починатися з великої літери\"          (наступні маленькі), доступна кирилиця,          доступні спецсимволи(\'-)   - **409**: Error: Conflict.         Причини:       1) Ця електронна адреса вже використовується   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Register
     * @param {AuthApi6bd64293ControllerRegisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public _6bd64293ControllerRegister(requestParameters: AuthApi6bd64293ControllerRegisterRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration)._6bd64293ControllerRegister(requestParameters.userRegisterSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user\'s personal data by token.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.     - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get My Profile
     * @param {AuthApi91ec46c6ControllerGetMyProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public _91ec46c6ControllerGetMyProfile(requestParameters: AuthApi91ec46c6ControllerGetMyProfileRequest = {}, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration)._91ec46c6ControllerGetMyProfile(requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user\'s token by provided credentials.  Please provide:   - **Request body**  data with credentials of user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Obtain Token
     * @param {AuthApiCec1ba17ControllerObtainTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public cec1ba17ControllerObtainToken(requestParameters: AuthApiCec1ba17ControllerObtainTokenRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).cec1ba17ControllerObtainToken(requestParameters.loginSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user\'s personal data by token.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.     - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Update My Profile
     * @param {AuthApiE27424f6ControllerUpdateMyProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public e27424f6ControllerUpdateMyProfile(requestParameters: AuthApiE27424f6ControllerUpdateMyProfileRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).e27424f6ControllerUpdateMyProfile(requestParameters.userUpdateSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GalleriesApi - axios parameter creator
 * @export
 */
export const GalleriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create gallery.  Please provide:   - **images**  of images ids for initial data for gallery  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.         Причини:         1) Не знайдено: немає збігів картинок            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Create Gallery
         * @param {GalleryInSchema} galleryInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _28e65c58ControllerCreateGallery: async (galleryInSchema: GalleryInSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'galleryInSchema' is not null or undefined
            assertParamExists('_28e65c58ControllerCreateGallery', 'galleryInSchema', galleryInSchema)
            const localVarPath = `/api/gallery/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(galleryInSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create gallery.  Please provide:   - **images**  of images ids for initial data for gallery  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.         Причини:         1) Не знайдено: немає збігів картинок            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Update Gallery
         * @param {any} galleryId 
         * @param {GalleryInSchema} galleryInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _838e915eControllerUpdateGallery: async (galleryId: any, galleryInSchema: GalleryInSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'galleryId' is not null or undefined
            assertParamExists('_838e915eControllerUpdateGallery', 'galleryId', galleryId)
            // verify required parameter 'galleryInSchema' is not null or undefined
            assertParamExists('_838e915eControllerUpdateGallery', 'galleryInSchema', galleryInSchema)
            const localVarPath = `/api/gallery/{gallery_id}/`
                .replace(`{${"gallery_id"}}`, encodeURIComponent(String(galleryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(galleryInSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get minimum of gallery fields.  Please provide:   - **gallery_id**  id of gallery we want to get  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.         Причини:         1) Не знайдено: немає збігів галерей            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Min Gallery
         * @param {any} galleryId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _9fae94b8ControllerGetMinGallery: async (galleryId: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'galleryId' is not null or undefined
            assertParamExists('_9fae94b8ControllerGetMinGallery', 'galleryId', galleryId)
            const localVarPath = `/api/gallery/min/{gallery_id}/`
                .replace(`{${"gallery_id"}}`, encodeURIComponent(String(galleryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get maximum of gallery fields.  Please provide:   - **gallery_id**  id of gallery we want to get  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.         Причини:         1) Не знайдено: немає збігів галерей            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Max Gallery
         * @param {any} galleryId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ccdd1fecControllerGetMaxGallery: async (galleryId: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'galleryId' is not null or undefined
            assertParamExists('ccdd1fecControllerGetMaxGallery', 'galleryId', galleryId)
            const localVarPath = `/api/gallery/max/{gallery_id}/`
                .replace(`{${"gallery_id"}}`, encodeURIComponent(String(galleryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GalleriesApi - functional programming interface
 * @export
 */
export const GalleriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GalleriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create gallery.  Please provide:   - **images**  of images ids for initial data for gallery  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.         Причини:         1) Не знайдено: немає збігів картинок            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Create Gallery
         * @param {GalleryInSchema} galleryInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _28e65c58ControllerCreateGallery(galleryInSchema: GalleryInSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GalleryMinOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._28e65c58ControllerCreateGallery(galleryInSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create gallery.  Please provide:   - **images**  of images ids for initial data for gallery  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.         Причини:         1) Не знайдено: немає збігів картинок            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Update Gallery
         * @param {any} galleryId 
         * @param {GalleryInSchema} galleryInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _838e915eControllerUpdateGallery(galleryId: any, galleryInSchema: GalleryInSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GalleryMinOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._838e915eControllerUpdateGallery(galleryId, galleryInSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get minimum of gallery fields.  Please provide:   - **gallery_id**  id of gallery we want to get  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.         Причини:         1) Не знайдено: немає збігів галерей            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Min Gallery
         * @param {any} galleryId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _9fae94b8ControllerGetMinGallery(galleryId: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GalleryMinOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._9fae94b8ControllerGetMinGallery(galleryId, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get maximum of gallery fields.  Please provide:   - **gallery_id**  id of gallery we want to get  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.         Причини:         1) Не знайдено: немає збігів галерей            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Max Gallery
         * @param {any} galleryId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ccdd1fecControllerGetMaxGallery(galleryId: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GalleryMaxOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ccdd1fecControllerGetMaxGallery(galleryId, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GalleriesApi - factory interface
 * @export
 */
export const GalleriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GalleriesApiFp(configuration)
    return {
        /**
         * Create gallery.  Please provide:   - **images**  of images ids for initial data for gallery  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.         Причини:         1) Не знайдено: немає збігів картинок            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Create Gallery
         * @param {GalleryInSchema} galleryInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _28e65c58ControllerCreateGallery(galleryInSchema: GalleryInSchema, acceptLanguage?: any, options?: any): AxiosPromise<GalleryMinOutSchema> {
            return localVarFp._28e65c58ControllerCreateGallery(galleryInSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Create gallery.  Please provide:   - **images**  of images ids for initial data for gallery  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.         Причини:         1) Не знайдено: немає збігів картинок            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Update Gallery
         * @param {any} galleryId 
         * @param {GalleryInSchema} galleryInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _838e915eControllerUpdateGallery(galleryId: any, galleryInSchema: GalleryInSchema, acceptLanguage?: any, options?: any): AxiosPromise<GalleryMinOutSchema> {
            return localVarFp._838e915eControllerUpdateGallery(galleryId, galleryInSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get minimum of gallery fields.  Please provide:   - **gallery_id**  id of gallery we want to get  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.         Причини:         1) Не знайдено: немає збігів галерей            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Min Gallery
         * @param {any} galleryId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _9fae94b8ControllerGetMinGallery(galleryId: any, acceptLanguage?: any, options?: any): AxiosPromise<GalleryMinOutSchema> {
            return localVarFp._9fae94b8ControllerGetMinGallery(galleryId, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get maximum of gallery fields.  Please provide:   - **gallery_id**  id of gallery we want to get  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.         Причини:         1) Не знайдено: немає збігів галерей            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Max Gallery
         * @param {any} galleryId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ccdd1fecControllerGetMaxGallery(galleryId: any, acceptLanguage?: any, options?: any): AxiosPromise<GalleryMaxOutSchema> {
            return localVarFp.ccdd1fecControllerGetMaxGallery(galleryId, acceptLanguage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _28e65c58ControllerCreateGallery operation in GalleriesApi.
 * @export
 * @interface GalleriesApi28e65c58ControllerCreateGalleryRequest
 */
export interface GalleriesApi28e65c58ControllerCreateGalleryRequest {
    /**
     * 
     * @type {GalleryInSchema}
     * @memberof GalleriesApi28e65c58ControllerCreateGallery
     */
    readonly galleryInSchema: GalleryInSchema

    /**
     * 
     * @type {any}
     * @memberof GalleriesApi28e65c58ControllerCreateGallery
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for _838e915eControllerUpdateGallery operation in GalleriesApi.
 * @export
 * @interface GalleriesApi838e915eControllerUpdateGalleryRequest
 */
export interface GalleriesApi838e915eControllerUpdateGalleryRequest {
    /**
     * 
     * @type {any}
     * @memberof GalleriesApi838e915eControllerUpdateGallery
     */
    readonly galleryId: any

    /**
     * 
     * @type {GalleryInSchema}
     * @memberof GalleriesApi838e915eControllerUpdateGallery
     */
    readonly galleryInSchema: GalleryInSchema

    /**
     * 
     * @type {any}
     * @memberof GalleriesApi838e915eControllerUpdateGallery
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for _9fae94b8ControllerGetMinGallery operation in GalleriesApi.
 * @export
 * @interface GalleriesApi9fae94b8ControllerGetMinGalleryRequest
 */
export interface GalleriesApi9fae94b8ControllerGetMinGalleryRequest {
    /**
     * 
     * @type {any}
     * @memberof GalleriesApi9fae94b8ControllerGetMinGallery
     */
    readonly galleryId: any

    /**
     * 
     * @type {any}
     * @memberof GalleriesApi9fae94b8ControllerGetMinGallery
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for ccdd1fecControllerGetMaxGallery operation in GalleriesApi.
 * @export
 * @interface GalleriesApiCcdd1fecControllerGetMaxGalleryRequest
 */
export interface GalleriesApiCcdd1fecControllerGetMaxGalleryRequest {
    /**
     * 
     * @type {any}
     * @memberof GalleriesApiCcdd1fecControllerGetMaxGallery
     */
    readonly galleryId: any

    /**
     * 
     * @type {any}
     * @memberof GalleriesApiCcdd1fecControllerGetMaxGallery
     */
    readonly acceptLanguage?: any
}

/**
 * GalleriesApi - object-oriented interface
 * @export
 * @class GalleriesApi
 * @extends {BaseAPI}
 */
export class GalleriesApi extends BaseAPI {
    /**
     * Create gallery.  Please provide:   - **images**  of images ids for initial data for gallery  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.         Причини:         1) Не знайдено: немає збігів картинок            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Create Gallery
     * @param {GalleriesApi28e65c58ControllerCreateGalleryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GalleriesApi
     */
    public _28e65c58ControllerCreateGallery(requestParameters: GalleriesApi28e65c58ControllerCreateGalleryRequest, options?: AxiosRequestConfig) {
        return GalleriesApiFp(this.configuration)._28e65c58ControllerCreateGallery(requestParameters.galleryInSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create gallery.  Please provide:   - **images**  of images ids for initial data for gallery  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.         Причини:         1) Не знайдено: немає збігів картинок            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Update Gallery
     * @param {GalleriesApi838e915eControllerUpdateGalleryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GalleriesApi
     */
    public _838e915eControllerUpdateGallery(requestParameters: GalleriesApi838e915eControllerUpdateGalleryRequest, options?: AxiosRequestConfig) {
        return GalleriesApiFp(this.configuration)._838e915eControllerUpdateGallery(requestParameters.galleryId, requestParameters.galleryInSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get minimum of gallery fields.  Please provide:   - **gallery_id**  id of gallery we want to get  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.         Причини:         1) Не знайдено: немає збігів галерей            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Min Gallery
     * @param {GalleriesApi9fae94b8ControllerGetMinGalleryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GalleriesApi
     */
    public _9fae94b8ControllerGetMinGallery(requestParameters: GalleriesApi9fae94b8ControllerGetMinGalleryRequest, options?: AxiosRequestConfig) {
        return GalleriesApiFp(this.configuration)._9fae94b8ControllerGetMinGallery(requestParameters.galleryId, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get maximum of gallery fields.  Please provide:   - **gallery_id**  id of gallery we want to get  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.         Причини:         1) Не знайдено: немає збігів галерей            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Max Gallery
     * @param {GalleriesApiCcdd1fecControllerGetMaxGalleryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GalleriesApi
     */
    public ccdd1fecControllerGetMaxGallery(requestParameters: GalleriesApiCcdd1fecControllerGetMaxGalleryRequest, options?: AxiosRequestConfig) {
        return GalleriesApiFp(this.configuration).ccdd1fecControllerGetMaxGallery(requestParameters.galleryId, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ImagesApi - axios parameter creator
 * @export
 */
export const ImagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create image for some entity.  Please provide:   - **file**  file for new template  Returns:   - **200**: Success response with the data.   - **403**: Error: Forbidden.         Причини:       1) Максимально дозволений розмір файлу 1MB       Причини:       2) Максимально дозволена довжина поля alt 60 символів   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Upload Image
         * @param {any} image 
         * @param {any} alt 
         * @param {any} [imgId] 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _27b53e9cControllerUploadImage: async (image: any, alt: any, imgId?: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'image' is not null or undefined
            assertParamExists('_27b53e9cControllerUploadImage', 'image', image)
            // verify required parameter 'alt' is not null or undefined
            assertParamExists('_27b53e9cControllerUploadImage', 'alt', alt)
            const localVarPath = `/api/image/upload/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            if (imgId !== undefined) {
                localVarQueryParameter['img_id'] = imgId;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


            if (image !== undefined) { 
                localVarFormParams.append('image', new Blob([JSON.stringify(image)], { type: "application/json", }));
            }
    
            if (alt !== undefined) { 
                localVarFormParams.append('alt', new Blob([JSON.stringify(alt)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Ger image by id.  Please provide:   - **img_id**  id for image  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.         Причини:         1) Не знайдено: немає збігів картинок            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Image
         * @param {any} imgId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _5f5ac29dControllerGetImage: async (imgId: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imgId' is not null or undefined
            assertParamExists('_5f5ac29dControllerGetImage', 'imgId', imgId)
            const localVarPath = `/api/image/{img_id}/`
                .replace(`{${"img_id"}}`, encodeURIComponent(String(imgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create image for some entity.  Please provide:   - **img_id**  id for image for deleting  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.         Причини:         1) Не знайдено: немає збігів картинок            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete Image
         * @param {any} imgId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _7243761bControllerDeleteImage: async (imgId: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'imgId' is not null or undefined
            assertParamExists('_7243761bControllerDeleteImage', 'imgId', imgId)
            const localVarPath = `/api/image/{img_id}/`
                .replace(`{${"img_id"}}`, encodeURIComponent(String(imgId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImagesApi - functional programming interface
 * @export
 */
export const ImagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create image for some entity.  Please provide:   - **file**  file for new template  Returns:   - **200**: Success response with the data.   - **403**: Error: Forbidden.         Причини:       1) Максимально дозволений розмір файлу 1MB       Причини:       2) Максимально дозволена довжина поля alt 60 символів   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Upload Image
         * @param {any} image 
         * @param {any} alt 
         * @param {any} [imgId] 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _27b53e9cControllerUploadImage(image: any, alt: any, imgId?: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._27b53e9cControllerUploadImage(image, alt, imgId, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Ger image by id.  Please provide:   - **img_id**  id for image  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.         Причини:         1) Не знайдено: немає збігів картинок            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Image
         * @param {any} imgId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _5f5ac29dControllerGetImage(imgId: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._5f5ac29dControllerGetImage(imgId, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create image for some entity.  Please provide:   - **img_id**  id for image for deleting  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.         Причини:         1) Не знайдено: немає збігів картинок            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete Image
         * @param {any} imgId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _7243761bControllerDeleteImage(imgId: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._7243761bControllerDeleteImage(imgId, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ImagesApi - factory interface
 * @export
 */
export const ImagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImagesApiFp(configuration)
    return {
        /**
         * Create image for some entity.  Please provide:   - **file**  file for new template  Returns:   - **200**: Success response with the data.   - **403**: Error: Forbidden.         Причини:       1) Максимально дозволений розмір файлу 1MB       Причини:       2) Максимально дозволена довжина поля alt 60 символів   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Upload Image
         * @param {any} image 
         * @param {any} alt 
         * @param {any} [imgId] 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _27b53e9cControllerUploadImage(image: any, alt: any, imgId?: any, acceptLanguage?: any, options?: any): AxiosPromise<ImageOutSchema> {
            return localVarFp._27b53e9cControllerUploadImage(image, alt, imgId, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Ger image by id.  Please provide:   - **img_id**  id for image  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.         Причини:         1) Не знайдено: немає збігів картинок            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Image
         * @param {any} imgId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _5f5ac29dControllerGetImage(imgId: any, acceptLanguage?: any, options?: any): AxiosPromise<ImageOutSchema> {
            return localVarFp._5f5ac29dControllerGetImage(imgId, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Create image for some entity.  Please provide:   - **img_id**  id for image for deleting  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.         Причини:         1) Не знайдено: немає збігів картинок            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete Image
         * @param {any} imgId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _7243761bControllerDeleteImage(imgId: any, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp._7243761bControllerDeleteImage(imgId, acceptLanguage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _27b53e9cControllerUploadImage operation in ImagesApi.
 * @export
 * @interface ImagesApi27b53e9cControllerUploadImageRequest
 */
export interface ImagesApi27b53e9cControllerUploadImageRequest {
    /**
     * 
     * @type {any}
     * @memberof ImagesApi27b53e9cControllerUploadImage
     */
    readonly image: any

    /**
     * 
     * @type {any}
     * @memberof ImagesApi27b53e9cControllerUploadImage
     */
    readonly alt: any

    /**
     * 
     * @type {any}
     * @memberof ImagesApi27b53e9cControllerUploadImage
     */
    readonly imgId?: any

    /**
     * 
     * @type {any}
     * @memberof ImagesApi27b53e9cControllerUploadImage
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for _5f5ac29dControllerGetImage operation in ImagesApi.
 * @export
 * @interface ImagesApi5f5ac29dControllerGetImageRequest
 */
export interface ImagesApi5f5ac29dControllerGetImageRequest {
    /**
     * 
     * @type {any}
     * @memberof ImagesApi5f5ac29dControllerGetImage
     */
    readonly imgId: any

    /**
     * 
     * @type {any}
     * @memberof ImagesApi5f5ac29dControllerGetImage
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for _7243761bControllerDeleteImage operation in ImagesApi.
 * @export
 * @interface ImagesApi7243761bControllerDeleteImageRequest
 */
export interface ImagesApi7243761bControllerDeleteImageRequest {
    /**
     * 
     * @type {any}
     * @memberof ImagesApi7243761bControllerDeleteImage
     */
    readonly imgId: any

    /**
     * 
     * @type {any}
     * @memberof ImagesApi7243761bControllerDeleteImage
     */
    readonly acceptLanguage?: any
}

/**
 * ImagesApi - object-oriented interface
 * @export
 * @class ImagesApi
 * @extends {BaseAPI}
 */
export class ImagesApi extends BaseAPI {
    /**
     * Create image for some entity.  Please provide:   - **file**  file for new template  Returns:   - **200**: Success response with the data.   - **403**: Error: Forbidden.         Причини:       1) Максимально дозволений розмір файлу 1MB       Причини:       2) Максимально дозволена довжина поля alt 60 символів   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Upload Image
     * @param {ImagesApi27b53e9cControllerUploadImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    public _27b53e9cControllerUploadImage(requestParameters: ImagesApi27b53e9cControllerUploadImageRequest, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration)._27b53e9cControllerUploadImage(requestParameters.image, requestParameters.alt, requestParameters.imgId, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Ger image by id.  Please provide:   - **img_id**  id for image  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.         Причини:         1) Не знайдено: немає збігів картинок            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Image
     * @param {ImagesApi5f5ac29dControllerGetImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    public _5f5ac29dControllerGetImage(requestParameters: ImagesApi5f5ac29dControllerGetImageRequest, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration)._5f5ac29dControllerGetImage(requestParameters.imgId, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create image for some entity.  Please provide:   - **img_id**  id for image for deleting  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.         Причини:         1) Не знайдено: немає збігів картинок            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Delete Image
     * @param {ImagesApi7243761bControllerDeleteImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImagesApi
     */
    public _7243761bControllerDeleteImage(requestParameters: ImagesApi7243761bControllerDeleteImageRequest, options?: AxiosRequestConfig) {
        return ImagesApiFp(this.configuration)._7243761bControllerDeleteImage(requestParameters.imgId, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MailingApi - axios parameter creator
 * @export
 */
export const MailingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create template for mailing.  Please provide:   - **file**  file for new template  Returns:   - **200**: Success response with the data.   - **403**: Error: Forbidden.         Причини:       1) Дозволено відправляти тільки html       2) Максимально дозволений розмір файлу 1MB   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Create Template
         * @param {any} file 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _07e9499bControllerCreateTemplate: async (file: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('_07e9499bControllerCreateTemplate', 'file', file)
            const localVarPath = `/api/mailing/template/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', new Blob([JSON.stringify(file)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete template for mailing by id.  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:       1) Не знайдено: немає збігів шаблонів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete Template
         * @param {any} tempId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _07f0c107ControllerDeleteTemplate: async (tempId: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tempId' is not null or undefined
            assertParamExists('_07f0c107ControllerDeleteTemplate', 'tempId', tempId)
            const localVarPath = `/api/mailing/template/{temp_id}/`
                .replace(`{${"temp_id"}}`, encodeURIComponent(String(tempId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Start mailing letter to recipients.  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:       1) Не знайдено: немає збігів шаблонів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Start Mailing
         * @param {MailingInSchema} mailingInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _174fe1f3ControllerStartMailing: async (mailingInSchema: MailingInSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mailingInSchema' is not null or undefined
            assertParamExists('_174fe1f3ControllerStartMailing', 'mailingInSchema', mailingInSchema)
            const localVarPath = `/api/mailing/start/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mailingInSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get last 5 templates for mailing.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Templates
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _3b50d48cControllerGetTemplates: async (acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/mailing/templates/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get status for current mailing.  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:       1) Не знайдено: немає збігів шаблонів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Status Mailing
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d1633d3bControllerStatusMailing: async (acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/mailing/status/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MailingApi - functional programming interface
 * @export
 */
export const MailingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MailingApiAxiosParamCreator(configuration)
    return {
        /**
         * Create template for mailing.  Please provide:   - **file**  file for new template  Returns:   - **200**: Success response with the data.   - **403**: Error: Forbidden.         Причини:       1) Дозволено відправляти тільки html       2) Максимально дозволений розмір файлу 1MB   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Create Template
         * @param {any} file 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _07e9499bControllerCreateTemplate(file: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MailTemplateOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._07e9499bControllerCreateTemplate(file, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete template for mailing by id.  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:       1) Не знайдено: немає збігів шаблонів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete Template
         * @param {any} tempId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _07f0c107ControllerDeleteTemplate(tempId: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._07f0c107ControllerDeleteTemplate(tempId, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Start mailing letter to recipients.  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:       1) Не знайдено: немає збігів шаблонів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Start Mailing
         * @param {MailingInSchema} mailingInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _174fe1f3ControllerStartMailing(mailingInSchema: MailingInSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._174fe1f3ControllerStartMailing(mailingInSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get last 5 templates for mailing.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Templates
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _3b50d48cControllerGetTemplates(acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MailTemplateOutSchema>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._3b50d48cControllerGetTemplates(acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get status for current mailing.  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:       1) Не знайдено: немає збігів шаблонів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Status Mailing
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async d1633d3bControllerStatusMailing(acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskInfoOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.d1633d3bControllerStatusMailing(acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MailingApi - factory interface
 * @export
 */
export const MailingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MailingApiFp(configuration)
    return {
        /**
         * Create template for mailing.  Please provide:   - **file**  file for new template  Returns:   - **200**: Success response with the data.   - **403**: Error: Forbidden.         Причини:       1) Дозволено відправляти тільки html       2) Максимально дозволений розмір файлу 1MB   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Create Template
         * @param {any} file 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _07e9499bControllerCreateTemplate(file: any, acceptLanguage?: any, options?: any): AxiosPromise<MailTemplateOutSchema> {
            return localVarFp._07e9499bControllerCreateTemplate(file, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete template for mailing by id.  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:       1) Не знайдено: немає збігів шаблонів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete Template
         * @param {any} tempId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _07f0c107ControllerDeleteTemplate(tempId: any, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp._07f0c107ControllerDeleteTemplate(tempId, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Start mailing letter to recipients.  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:       1) Не знайдено: немає збігів шаблонів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Start Mailing
         * @param {MailingInSchema} mailingInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _174fe1f3ControllerStartMailing(mailingInSchema: MailingInSchema, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp._174fe1f3ControllerStartMailing(mailingInSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get last 5 templates for mailing.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Templates
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _3b50d48cControllerGetTemplates(acceptLanguage?: any, options?: any): AxiosPromise<Array<MailTemplateOutSchema>> {
            return localVarFp._3b50d48cControllerGetTemplates(acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get status for current mailing.  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:       1) Не знайдено: немає збігів шаблонів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Status Mailing
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        d1633d3bControllerStatusMailing(acceptLanguage?: any, options?: any): AxiosPromise<TaskInfoOutSchema> {
            return localVarFp.d1633d3bControllerStatusMailing(acceptLanguage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _07e9499bControllerCreateTemplate operation in MailingApi.
 * @export
 * @interface MailingApi07e9499bControllerCreateTemplateRequest
 */
export interface MailingApi07e9499bControllerCreateTemplateRequest {
    /**
     * 
     * @type {any}
     * @memberof MailingApi07e9499bControllerCreateTemplate
     */
    readonly file: any

    /**
     * 
     * @type {any}
     * @memberof MailingApi07e9499bControllerCreateTemplate
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for _07f0c107ControllerDeleteTemplate operation in MailingApi.
 * @export
 * @interface MailingApi07f0c107ControllerDeleteTemplateRequest
 */
export interface MailingApi07f0c107ControllerDeleteTemplateRequest {
    /**
     * 
     * @type {any}
     * @memberof MailingApi07f0c107ControllerDeleteTemplate
     */
    readonly tempId: any

    /**
     * 
     * @type {any}
     * @memberof MailingApi07f0c107ControllerDeleteTemplate
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for _174fe1f3ControllerStartMailing operation in MailingApi.
 * @export
 * @interface MailingApi174fe1f3ControllerStartMailingRequest
 */
export interface MailingApi174fe1f3ControllerStartMailingRequest {
    /**
     * 
     * @type {MailingInSchema}
     * @memberof MailingApi174fe1f3ControllerStartMailing
     */
    readonly mailingInSchema: MailingInSchema

    /**
     * 
     * @type {any}
     * @memberof MailingApi174fe1f3ControllerStartMailing
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for _3b50d48cControllerGetTemplates operation in MailingApi.
 * @export
 * @interface MailingApi3b50d48cControllerGetTemplatesRequest
 */
export interface MailingApi3b50d48cControllerGetTemplatesRequest {
    /**
     * 
     * @type {any}
     * @memberof MailingApi3b50d48cControllerGetTemplates
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for d1633d3bControllerStatusMailing operation in MailingApi.
 * @export
 * @interface MailingApiD1633d3bControllerStatusMailingRequest
 */
export interface MailingApiD1633d3bControllerStatusMailingRequest {
    /**
     * 
     * @type {any}
     * @memberof MailingApiD1633d3bControllerStatusMailing
     */
    readonly acceptLanguage?: any
}

/**
 * MailingApi - object-oriented interface
 * @export
 * @class MailingApi
 * @extends {BaseAPI}
 */
export class MailingApi extends BaseAPI {
    /**
     * Create template for mailing.  Please provide:   - **file**  file for new template  Returns:   - **200**: Success response with the data.   - **403**: Error: Forbidden.         Причини:       1) Дозволено відправляти тільки html       2) Максимально дозволений розмір файлу 1MB   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Create Template
     * @param {MailingApi07e9499bControllerCreateTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailingApi
     */
    public _07e9499bControllerCreateTemplate(requestParameters: MailingApi07e9499bControllerCreateTemplateRequest, options?: AxiosRequestConfig) {
        return MailingApiFp(this.configuration)._07e9499bControllerCreateTemplate(requestParameters.file, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete template for mailing by id.  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:       1) Не знайдено: немає збігів шаблонів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Delete Template
     * @param {MailingApi07f0c107ControllerDeleteTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailingApi
     */
    public _07f0c107ControllerDeleteTemplate(requestParameters: MailingApi07f0c107ControllerDeleteTemplateRequest, options?: AxiosRequestConfig) {
        return MailingApiFp(this.configuration)._07f0c107ControllerDeleteTemplate(requestParameters.tempId, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Start mailing letter to recipients.  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:       1) Не знайдено: немає збігів шаблонів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Start Mailing
     * @param {MailingApi174fe1f3ControllerStartMailingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailingApi
     */
    public _174fe1f3ControllerStartMailing(requestParameters: MailingApi174fe1f3ControllerStartMailingRequest, options?: AxiosRequestConfig) {
        return MailingApiFp(this.configuration)._174fe1f3ControllerStartMailing(requestParameters.mailingInSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get last 5 templates for mailing.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Templates
     * @param {MailingApi3b50d48cControllerGetTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailingApi
     */
    public _3b50d48cControllerGetTemplates(requestParameters: MailingApi3b50d48cControllerGetTemplatesRequest = {}, options?: AxiosRequestConfig) {
        return MailingApiFp(this.configuration)._3b50d48cControllerGetTemplates(requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get status for current mailing.  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:       1) Не знайдено: немає збігів шаблонів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Status Mailing
     * @param {MailingApiD1633d3bControllerStatusMailingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailingApi
     */
    public d1633d3bControllerStatusMailing(requestParameters: MailingApiD1633d3bControllerStatusMailingRequest = {}, options?: AxiosRequestConfig) {
        return MailingApiFp(this.configuration).d1633d3bControllerStatusMailing(requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **404**: Error: Conflict.         Причини:       1) Не знайдено: немає збігів користувачів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get By Id
         * @param {any} userId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _1d6697e5ControllerGetById: async (userId: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('_1d6697e5ControllerGetById', 'userId', userId)
            const localVarPath = `/api/users/detail/{user_id}/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint gets all users.  Makes pagination, search and sorting of records.  Please provide:  - **page**  number of page we want to get  - **page_size**  length of records per page  - **search_line**  helps to find rows which contains search line  - **sort**  define by which field sort rows  - **ascendig**  determines in which direction to sort  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Datatable
         * @param {any} page 
         * @param {any} pageSize 
         * @param {any} [searchLine] 
         * @param {any} [sort] 
         * @param {any} [ascending] 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _627e9c95ControllerDatatable: async (page: any, pageSize: any, searchLine?: any, sort?: any, ascending?: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('_627e9c95ControllerDatatable', 'page', page)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('_627e9c95ControllerDatatable', 'pageSize', pageSize)
            const localVarPath = `/api/users/datable/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (searchLine !== undefined) {
                localVarQueryParameter['search_line'] = searchLine;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (ascending !== undefined) {
                localVarQueryParameter['ascending'] = ascending;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **404**: Error: Conflict.         Причини:       1) Не знайдено: немає збігів користувачів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete By Id
         * @param {any} userId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _6814f588ControllerDeleteById: async (userId: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('_6814f588ControllerDeleteById', 'userId', userId)
            const localVarPath = `/api/users/detail/{user_id}/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update user by id.  Please provide:   - **Request body**  data for updating user  Returns:   - **200**: Success response with the data.   - **403**: Error: Forbidden.         Причини:       1) Введено некоректний номер телефону       2) Ім\'я та прізвище повинно починатися з великої літери          (наступні маленькі), доступна кирилиця,          доступні спецсимволи(\'-)   - **404**: Error: Conflict.         Причини:       1) Не знайдено: немає збігів користувачів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Update By Id
         * @param {any} userId 
         * @param {UserUpdateSchema} userUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        a3247699ControllerUpdateById: async (userId: any, userUpdateSchema: UserUpdateSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('a3247699ControllerUpdateById', 'userId', userId)
            // verify required parameter 'userUpdateSchema' is not null or undefined
            assertParamExists('a3247699ControllerUpdateById', 'userUpdateSchema', userUpdateSchema)
            const localVarPath = `/api/users/detail/{user_id}/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **404**: Error: Conflict.         Причини:       1) Не знайдено: немає збігів користувачів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get By Id
         * @param {any} userId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _1d6697e5ControllerGetById(userId: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._1d6697e5ControllerGetById(userId, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint gets all users.  Makes pagination, search and sorting of records.  Please provide:  - **page**  number of page we want to get  - **page_size**  length of records per page  - **search_line**  helps to find rows which contains search line  - **sort**  define by which field sort rows  - **ascendig**  determines in which direction to sort  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Datatable
         * @param {any} page 
         * @param {any} pageSize 
         * @param {any} [searchLine] 
         * @param {any} [sort] 
         * @param {any} [ascending] 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _627e9c95ControllerDatatable(page: any, pageSize: any, searchLine?: any, sort?: any, ascending?: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersAllSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._627e9c95ControllerDatatable(page, pageSize, searchLine, sort, ascending, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **404**: Error: Conflict.         Причини:       1) Не знайдено: немає збігів користувачів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete By Id
         * @param {any} userId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async _6814f588ControllerDeleteById(userId: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator._6814f588ControllerDeleteById(userId, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update user by id.  Please provide:   - **Request body**  data for updating user  Returns:   - **200**: Success response with the data.   - **403**: Error: Forbidden.         Причини:       1) Введено некоректний номер телефону       2) Ім\'я та прізвище повинно починатися з великої літери          (наступні маленькі), доступна кирилиця,          доступні спецсимволи(\'-)   - **404**: Error: Conflict.         Причини:       1) Не знайдено: немає збігів користувачів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Update By Id
         * @param {any} userId 
         * @param {UserUpdateSchema} userUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async a3247699ControllerUpdateById(userId: any, userUpdateSchema: UserUpdateSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.a3247699ControllerUpdateById(userId, userUpdateSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **404**: Error: Conflict.         Причини:       1) Не знайдено: немає збігів користувачів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get By Id
         * @param {any} userId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _1d6697e5ControllerGetById(userId: any, acceptLanguage?: any, options?: any): AxiosPromise<UserOutSchema> {
            return localVarFp._1d6697e5ControllerGetById(userId, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint gets all users.  Makes pagination, search and sorting of records.  Please provide:  - **page**  number of page we want to get  - **page_size**  length of records per page  - **search_line**  helps to find rows which contains search line  - **sort**  define by which field sort rows  - **ascendig**  determines in which direction to sort  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Datatable
         * @param {any} page 
         * @param {any} pageSize 
         * @param {any} [searchLine] 
         * @param {any} [sort] 
         * @param {any} [ascending] 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _627e9c95ControllerDatatable(page: any, pageSize: any, searchLine?: any, sort?: any, ascending?: any, acceptLanguage?: any, options?: any): AxiosPromise<UsersAllSchema> {
            return localVarFp._627e9c95ControllerDatatable(page, pageSize, searchLine, sort, ascending, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **404**: Error: Conflict.         Причини:       1) Не знайдено: немає збігів користувачів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete By Id
         * @param {any} userId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        _6814f588ControllerDeleteById(userId: any, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp._6814f588ControllerDeleteById(userId, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Update user by id.  Please provide:   - **Request body**  data for updating user  Returns:   - **200**: Success response with the data.   - **403**: Error: Forbidden.         Причини:       1) Введено некоректний номер телефону       2) Ім\'я та прізвище повинно починатися з великої літери          (наступні маленькі), доступна кирилиця,          доступні спецсимволи(\'-)   - **404**: Error: Conflict.         Причини:       1) Не знайдено: немає збігів користувачів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Update By Id
         * @param {any} userId 
         * @param {UserUpdateSchema} userUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        a3247699ControllerUpdateById(userId: any, userUpdateSchema: UserUpdateSchema, acceptLanguage?: any, options?: any): AxiosPromise<UserOutSchema> {
            return localVarFp.a3247699ControllerUpdateById(userId, userUpdateSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for _1d6697e5ControllerGetById operation in UsersApi.
 * @export
 * @interface UsersApi1d6697e5ControllerGetByIdRequest
 */
export interface UsersApi1d6697e5ControllerGetByIdRequest {
    /**
     * 
     * @type {any}
     * @memberof UsersApi1d6697e5ControllerGetById
     */
    readonly userId: any

    /**
     * 
     * @type {any}
     * @memberof UsersApi1d6697e5ControllerGetById
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for _627e9c95ControllerDatatable operation in UsersApi.
 * @export
 * @interface UsersApi627e9c95ControllerDatatableRequest
 */
export interface UsersApi627e9c95ControllerDatatableRequest {
    /**
     * 
     * @type {any}
     * @memberof UsersApi627e9c95ControllerDatatable
     */
    readonly page: any

    /**
     * 
     * @type {any}
     * @memberof UsersApi627e9c95ControllerDatatable
     */
    readonly pageSize: any

    /**
     * 
     * @type {any}
     * @memberof UsersApi627e9c95ControllerDatatable
     */
    readonly searchLine?: any

    /**
     * 
     * @type {any}
     * @memberof UsersApi627e9c95ControllerDatatable
     */
    readonly sort?: any

    /**
     * 
     * @type {any}
     * @memberof UsersApi627e9c95ControllerDatatable
     */
    readonly ascending?: any

    /**
     * 
     * @type {any}
     * @memberof UsersApi627e9c95ControllerDatatable
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for _6814f588ControllerDeleteById operation in UsersApi.
 * @export
 * @interface UsersApi6814f588ControllerDeleteByIdRequest
 */
export interface UsersApi6814f588ControllerDeleteByIdRequest {
    /**
     * 
     * @type {any}
     * @memberof UsersApi6814f588ControllerDeleteById
     */
    readonly userId: any

    /**
     * 
     * @type {any}
     * @memberof UsersApi6814f588ControllerDeleteById
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for a3247699ControllerUpdateById operation in UsersApi.
 * @export
 * @interface UsersApiA3247699ControllerUpdateByIdRequest
 */
export interface UsersApiA3247699ControllerUpdateByIdRequest {
    /**
     * 
     * @type {any}
     * @memberof UsersApiA3247699ControllerUpdateById
     */
    readonly userId: any

    /**
     * 
     * @type {UserUpdateSchema}
     * @memberof UsersApiA3247699ControllerUpdateById
     */
    readonly userUpdateSchema: UserUpdateSchema

    /**
     * 
     * @type {any}
     * @memberof UsersApiA3247699ControllerUpdateById
     */
    readonly acceptLanguage?: any
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **404**: Error: Conflict.         Причини:       1) Не знайдено: немає збігів користувачів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get By Id
     * @param {UsersApi1d6697e5ControllerGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public _1d6697e5ControllerGetById(requestParameters: UsersApi1d6697e5ControllerGetByIdRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration)._1d6697e5ControllerGetById(requestParameters.userId, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint gets all users.  Makes pagination, search and sorting of records.  Please provide:  - **page**  number of page we want to get  - **page_size**  length of records per page  - **search_line**  helps to find rows which contains search line  - **sort**  define by which field sort rows  - **ascendig**  determines in which direction to sort  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Datatable
     * @param {UsersApi627e9c95ControllerDatatableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public _627e9c95ControllerDatatable(requestParameters: UsersApi627e9c95ControllerDatatableRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration)._627e9c95ControllerDatatable(requestParameters.page, requestParameters.pageSize, requestParameters.searchLine, requestParameters.sort, requestParameters.ascending, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **404**: Error: Conflict.         Причини:       1) Не знайдено: немає збігів користувачів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Delete By Id
     * @param {UsersApi6814f588ControllerDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public _6814f588ControllerDeleteById(requestParameters: UsersApi6814f588ControllerDeleteByIdRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration)._6814f588ControllerDeleteById(requestParameters.userId, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update user by id.  Please provide:   - **Request body**  data for updating user  Returns:   - **200**: Success response with the data.   - **403**: Error: Forbidden.         Причини:       1) Введено некоректний номер телефону       2) Ім\'я та прізвище повинно починатися з великої літери          (наступні маленькі), доступна кирилиця,          доступні спецсимволи(\'-)   - **404**: Error: Conflict.         Причини:       1) Не знайдено: немає збігів користувачів       на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Update By Id
     * @param {UsersApiA3247699ControllerUpdateByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public a3247699ControllerUpdateById(requestParameters: UsersApiA3247699ControllerUpdateByIdRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).a3247699ControllerUpdateById(requestParameters.userId, requestParameters.userUpdateSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
}


