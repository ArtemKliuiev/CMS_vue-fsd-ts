/* tslint:disable */
/* eslint-disable */
/**
 * KinoCMS (admin-panel)
 * ADMIN API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Pydantic schema for getting Bottom slider items.
 * @export
 * @interface BottomSliderItemOutSchema
 */
export interface BottomSliderItemOutSchema {
    /**
     * 
     * @type {ImageOutSchema}
     * @memberof BottomSliderItemOutSchema
     */
    'image': ImageOutSchema;
    /**
     * 
     * @type {any}
     * @memberof BottomSliderItemOutSchema
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof BottomSliderItemOutSchema
     */
    'url'?: any;
}
/**
 * Pydantic schema for updating or creating BottomSliderItem.
 * @export
 * @interface BottomSliderItemUpdateSchema
 */
export interface BottomSliderItemUpdateSchema {
    /**
     * 
     * @type {any}
     * @memberof BottomSliderItemUpdateSchema
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof BottomSliderItemUpdateSchema
     */
    'url'?: any;
    /**
     * 
     * @type {any}
     * @memberof BottomSliderItemUpdateSchema
     */
    'image'?: any;
    /**
     * 
     * @type {any}
     * @memberof BottomSliderItemUpdateSchema
     */
    'delete': any;
}
/**
 * Pydantic schema for getting Bottom slider.
 * @export
 * @interface BottomSliderOutSchema
 */
export interface BottomSliderOutSchema {
    /**
     * 
     * @type {any}
     * @memberof BottomSliderOutSchema
     */
    'items': any;
    /**
     * 
     * @type {any}
     * @memberof BottomSliderOutSchema
     */
    'speed'?: any;
    /**
     * 
     * @type {any}
     * @memberof BottomSliderOutSchema
     */
    'active'?: any;
}
/**
 * Pydantic schema for updating BottomSlider.
 * @export
 * @interface BottomSliderUpdateSchema
 */
export interface BottomSliderUpdateSchema {
    /**
     * 
     * @type {any}
     * @memberof BottomSliderUpdateSchema
     */
    'active'?: any;
    /**
     * 
     * @type {any}
     * @memberof BottomSliderUpdateSchema
     */
    'speed'?: any;
    /**
     * 
     * @type {any}
     * @memberof BottomSliderUpdateSchema
     */
    'items'?: any;
}
/**
 * Pydantic schema for showing cinema card.
 * @export
 * @interface CinemaCardOutSchema
 */
export interface CinemaCardOutSchema {
    /**
     * 
     * @type {ImageOutSchema}
     * @memberof CinemaCardOutSchema
     */
    'banner': ImageOutSchema;
    /**
     * 
     * @type {any}
     * @memberof CinemaCardOutSchema
     */
    'name': any;
    /**
     * 
     * @type {any}
     * @memberof CinemaCardOutSchema
     */
    'slug'?: any;
}
/**
 * Pydantic schema for creating cinemas to server side.
 * @export
 * @interface CinemaInSchema
 */
export interface CinemaInSchema {
    /**
     * 
     * @type {any}
     * @memberof CinemaInSchema
     */
    'seo_title': any;
    /**
     * 
     * @type {any}
     * @memberof CinemaInSchema
     */
    'seo_description': any;
    /**
     * 
     * @type {ImageInSchema}
     * @memberof CinemaInSchema
     */
    'seo_image': ImageInSchema;
    /**
     * 
     * @type {any}
     * @memberof CinemaInSchema
     */
    'name_uk': any;
    /**
     * 
     * @type {any}
     * @memberof CinemaInSchema
     */
    'name_ru': any;
    /**
     * 
     * @type {any}
     * @memberof CinemaInSchema
     */
    'description_uk': any;
    /**
     * 
     * @type {any}
     * @memberof CinemaInSchema
     */
    'description_ru': any;
    /**
     * 
     * @type {any}
     * @memberof CinemaInSchema
     */
    'terms_uk': any;
    /**
     * 
     * @type {any}
     * @memberof CinemaInSchema
     */
    'terms_ru': any;
    /**
     * 
     * @type {any}
     * @memberof CinemaInSchema
     */
    'phone_1': any;
    /**
     * 
     * @type {any}
     * @memberof CinemaInSchema
     */
    'phone_2': any;
    /**
     * 
     * @type {any}
     * @memberof CinemaInSchema
     */
    'email': any;
    /**
     * 
     * @type {ImageInSchema}
     * @memberof CinemaInSchema
     */
    'banner': ImageInSchema;
    /**
     * 
     * @type {ImageInSchema}
     * @memberof CinemaInSchema
     */
    'logo': ImageInSchema;
    /**
     * 
     * @type {any}
     * @memberof CinemaInSchema
     */
    'address_uk': any;
    /**
     * 
     * @type {any}
     * @memberof CinemaInSchema
     */
    'address_ru': any;
    /**
     * 
     * @type {any}
     * @memberof CinemaInSchema
     */
    'coordinate': any;
    /**
     * 
     * @type {any}
     * @memberof CinemaInSchema
     */
    'gallery'?: any;
}
/**
 * Pydantic schema for showing cinema full data.
 * @export
 * @interface CinemaOutSchema
 */
export interface CinemaOutSchema {
    /**
     * 
     * @type {ImageOutSchema}
     * @memberof CinemaOutSchema
     */
    'banner': ImageOutSchema;
    /**
     * 
     * @type {ImageOutSchema}
     * @memberof CinemaOutSchema
     */
    'logo': ImageOutSchema;
    /**
     * 
     * @type {ImageOutSchema}
     * @memberof CinemaOutSchema
     */
    'seo_image': ImageOutSchema;
    /**
     * 
     * @type {any}
     * @memberof CinemaOutSchema
     */
    'seo_title': any;
    /**
     * 
     * @type {any}
     * @memberof CinemaOutSchema
     */
    'seo_description': any;
    /**
     * 
     * @type {any}
     * @memberof CinemaOutSchema
     */
    'name_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaOutSchema
     */
    'name_ru'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaOutSchema
     */
    'description_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaOutSchema
     */
    'description_ru'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaOutSchema
     */
    'terms_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaOutSchema
     */
    'terms_ru'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaOutSchema
     */
    'phone_1': any;
    /**
     * 
     * @type {any}
     * @memberof CinemaOutSchema
     */
    'phone_2': any;
    /**
     * 
     * @type {any}
     * @memberof CinemaOutSchema
     */
    'email': any;
    /**
     * 
     * @type {any}
     * @memberof CinemaOutSchema
     */
    'address_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaOutSchema
     */
    'address_ru'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaOutSchema
     */
    'coordinate': any;
    /**
     * 
     * @type {any}
     * @memberof CinemaOutSchema
     */
    'gallery'?: any;
}
/**
 * Pydantic schema for updating cinema.
 * @export
 * @interface CinemaUpdateSchema
 */
export interface CinemaUpdateSchema {
    /**
     * 
     * @type {any}
     * @memberof CinemaUpdateSchema
     */
    'seo_title'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaUpdateSchema
     */
    'seo_description'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaUpdateSchema
     */
    'seo_image'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaUpdateSchema
     */
    'name_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaUpdateSchema
     */
    'name_ru'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaUpdateSchema
     */
    'description_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaUpdateSchema
     */
    'description_ru'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaUpdateSchema
     */
    'terms_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaUpdateSchema
     */
    'terms_ru'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaUpdateSchema
     */
    'phone_1'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaUpdateSchema
     */
    'phone_2'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaUpdateSchema
     */
    'email'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaUpdateSchema
     */
    'banner'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaUpdateSchema
     */
    'logo'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaUpdateSchema
     */
    'address_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaUpdateSchema
     */
    'address_ru'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaUpdateSchema
     */
    'coordinate'?: any;
    /**
     * 
     * @type {any}
     * @memberof CinemaUpdateSchema
     */
    'gallery'?: any;
}
/**
 * 
 * @export
 * @interface CityEnum
 */
export interface CityEnum {
}
/**
 * 
 * @export
 * @interface CountryEnum
 */
export interface CountryEnum {
}
/**
 * 
 * @export
 * @interface DirectionEnum
 */
export interface DirectionEnum {
}
/**
 * 
 * @export
 * @interface DynamicInput
 */
export interface DynamicInput {
    /**
     * 
     * @type {any}
     * @memberof DynamicInput
     */
    'page'?: any;
    /**
     * 
     * @type {any}
     * @memberof DynamicInput
     */
    'page_size'?: any;
}
/**
 * Pydantic schema for getting ETEndBBanner.
 * @export
 * @interface ETEndBBannerOutSchema
 */
export interface ETEndBBannerOutSchema {
    /**
     * 
     * @type {ImageOutSchema}
     * @memberof ETEndBBannerOutSchema
     */
    'image': ImageOutSchema;
    /**
     * 
     * @type {any}
     * @memberof ETEndBBannerOutSchema
     */
    'color'?: any;
    /**
     * 
     * @type {any}
     * @memberof ETEndBBannerOutSchema
     */
    'use_img': any;
}
/**
 * Pydantic schema for updating ETEndBBanner.
 * @export
 * @interface ETEndBBannerUpdateSchema
 */
export interface ETEndBBannerUpdateSchema {
    /**
     * 
     * @type {any}
     * @memberof ETEndBBannerUpdateSchema
     */
    'image'?: any;
    /**
     * 
     * @type {any}
     * @memberof ETEndBBannerUpdateSchema
     */
    'color'?: any;
    /**
     * 
     * @type {any}
     * @memberof ETEndBBannerUpdateSchema
     */
    'use_img'?: any;
}
/**
 * Pydantic schema for return gallery images to client side.
 * @export
 * @interface GalleryItemOutSchema
 */
export interface GalleryItemOutSchema {
    /**
     * 
     * @type {any}
     * @memberof GalleryItemOutSchema
     */
    'image': any;
    /**
     * 
     * @type {any}
     * @memberof GalleryItemOutSchema
     */
    'image_webp': any;
    /**
     * 
     * @type {any}
     * @memberof GalleryItemOutSchema
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof GalleryItemOutSchema
     */
    'alt': any;
}
/**
 * Pydantic schema for uploading image to server side.
 * @export
 * @interface GalleryItemSchema
 */
export interface GalleryItemSchema {
    /**
     * 
     * @type {any}
     * @memberof GalleryItemSchema
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof GalleryItemSchema
     */
    'alt'?: any;
    /**
     * 
     * @type {any}
     * @memberof GalleryItemSchema
     */
    'image'?: any;
    /**
     * 
     * @type {any}
     * @memberof GalleryItemSchema
     */
    'delete': any;
    /**
     * 
     * @type {any}
     * @memberof GalleryItemSchema
     */
    'filename'?: any;
}
/**
 * 
 * @export
 * @interface GenresEnum
 */
export interface GenresEnum {
}
/**
 * Pydantic schema for showing hall card.
 * @export
 * @interface HallCardOutSchema
 */
export interface HallCardOutSchema {
    /**
     * 
     * @type {any}
     * @memberof HallCardOutSchema
     */
    'number': any;
    /**
     * 
     * @type {any}
     * @memberof HallCardOutSchema
     */
    'date_created': any;
    /**
     * 
     * @type {any}
     * @memberof HallCardOutSchema
     */
    'id'?: any;
}
/**
 * Pydantic schema for creating halls to server side.
 * @export
 * @interface HallInSchema
 */
export interface HallInSchema {
    /**
     * 
     * @type {any}
     * @memberof HallInSchema
     */
    'seo_title': any;
    /**
     * 
     * @type {any}
     * @memberof HallInSchema
     */
    'seo_description': any;
    /**
     * 
     * @type {ImageInSchema}
     * @memberof HallInSchema
     */
    'seo_image': ImageInSchema;
    /**
     * 
     * @type {any}
     * @memberof HallInSchema
     */
    'number': any;
    /**
     * 
     * @type {any}
     * @memberof HallInSchema
     */
    'description_uk': any;
    /**
     * 
     * @type {any}
     * @memberof HallInSchema
     */
    'description_ru': any;
    /**
     * 
     * @type {ImageInSchema}
     * @memberof HallInSchema
     */
    'banner': ImageInSchema;
    /**
     * 
     * @type {any}
     * @memberof HallInSchema
     */
    'tech_id'?: any;
    /**
     * 
     * @type {any}
     * @memberof HallInSchema
     */
    'gallery'?: any;
}
/**
 * Pydantic schema for showing hall full data.
 * @export
 * @interface HallOutSchema
 */
export interface HallOutSchema {
    /**
     * 
     * @type {ImageOutSchema}
     * @memberof HallOutSchema
     */
    'banner': ImageOutSchema;
    /**
     * 
     * @type {ImageOutSchema}
     * @memberof HallOutSchema
     */
    'seo_image': ImageOutSchema;
    /**
     * 
     * @type {TechOutSchema}
     * @memberof HallOutSchema
     */
    'tech': TechOutSchema;
    /**
     * 
     * @type {any}
     * @memberof HallOutSchema
     */
    'number': any;
    /**
     * 
     * @type {any}
     * @memberof HallOutSchema
     */
    'description_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof HallOutSchema
     */
    'description_ru'?: any;
    /**
     * 
     * @type {any}
     * @memberof HallOutSchema
     */
    'gallery'?: any;
    /**
     * 
     * @type {any}
     * @memberof HallOutSchema
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof HallOutSchema
     */
    'seo_title': any;
    /**
     * 
     * @type {any}
     * @memberof HallOutSchema
     */
    'seo_description': any;
}
/**
 * Pydantic schema for updating hall.
 * @export
 * @interface HallUpdateSchema
 */
export interface HallUpdateSchema {
    /**
     * 
     * @type {any}
     * @memberof HallUpdateSchema
     */
    'seo_title'?: any;
    /**
     * 
     * @type {any}
     * @memberof HallUpdateSchema
     */
    'seo_description'?: any;
    /**
     * 
     * @type {any}
     * @memberof HallUpdateSchema
     */
    'seo_image'?: any;
    /**
     * 
     * @type {any}
     * @memberof HallUpdateSchema
     */
    'number'?: any;
    /**
     * 
     * @type {any}
     * @memberof HallUpdateSchema
     */
    'description_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof HallUpdateSchema
     */
    'description_ru'?: any;
    /**
     * 
     * @type {any}
     * @memberof HallUpdateSchema
     */
    'banner'?: any;
    /**
     * 
     * @type {any}
     * @memberof HallUpdateSchema
     */
    'gallery'?: any;
}
/**
 * Pydantic schema for uploading image to server side.
 * @export
 * @interface ImageInSchema
 */
export interface ImageInSchema {
    /**
     * 
     * @type {any}
     * @memberof ImageInSchema
     */
    'alt'?: any;
    /**
     * 
     * @type {any}
     * @memberof ImageInSchema
     */
    'image': any;
    /**
     * 
     * @type {any}
     * @memberof ImageInSchema
     */
    'filename': any;
}
/**
 * Pydantic schema for return image to client side.
 * @export
 * @interface ImageOutSchema
 */
export interface ImageOutSchema {
    /**
     * 
     * @type {any}
     * @memberof ImageOutSchema
     */
    'image': any;
    /**
     * 
     * @type {any}
     * @memberof ImageOutSchema
     */
    'image_webp': any;
    /**
     * 
     * @type {any}
     * @memberof ImageOutSchema
     */
    'alt': any;
}
/**
 * Pydantic schema for updating image.
 * @export
 * @interface ImageUpdateSchema
 */
export interface ImageUpdateSchema {
    /**
     * 
     * @type {any}
     * @memberof ImageUpdateSchema
     */
    'alt'?: any;
    /**
     * 
     * @type {any}
     * @memberof ImageUpdateSchema
     */
    'image'?: any;
    /**
     * 
     * @type {any}
     * @memberof ImageUpdateSchema
     */
    'filename'?: any;
}
/**
 * 
 * @export
 * @interface LangEnum
 */
export interface LangEnum {
}
/**
 * 
 * @export
 * @interface LegalAgeEnum
 */
export interface LegalAgeEnum {
}
/**
 * Pydantic schema for return message to client side.  Purpose of this schema just say that operation has been successful or failed
 * @export
 * @interface LoginResponseSchema
 */
export interface LoginResponseSchema {
    /**
     * 
     * @type {any}
     * @memberof LoginResponseSchema
     */
    'email': any;
    /**
     * 
     * @type {any}
     * @memberof LoginResponseSchema
     */
    'refresh': any;
    /**
     * 
     * @type {any}
     * @memberof LoginResponseSchema
     */
    'access': any;
    /**
     * 
     * @type {any}
     * @memberof LoginResponseSchema
     */
    'admin': any;
}
/**
 * Pydantic schema for return message to client side.  Purpose of this schema just say that operation has been successful or failed
 * @export
 * @interface LoginSchema
 */
export interface LoginSchema {
    /**
     * 
     * @type {any}
     * @memberof LoginSchema
     */
    'password': any;
    /**
     * 
     * @type {any}
     * @memberof LoginSchema
     */
    'email': any;
}
/**
 * Pydantic schema for MailTemplate.  Purpose of this schema to return mail template data
 * @export
 * @interface MailTemplateOutSchema
 */
export interface MailTemplateOutSchema {
    /**
     * 
     * @type {any}
     * @memberof MailTemplateOutSchema
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof MailTemplateOutSchema
     */
    'name': any;
}
/**
 * Pydantic schema for mailing.  Purpose of this schema to make mailing
 * @export
 * @interface MailingInSchema
 */
export interface MailingInSchema {
    /**
     * 
     * @type {any}
     * @memberof MailingInSchema
     */
    'user_ids'?: any;
    /**
     * 
     * @type {any}
     * @memberof MailingInSchema
     */
    'temp_id': any;
}
/**
 * Pydantic schema for return message to client side.  Purpose of this schema just say that operation has been successful or failed
 * @export
 * @interface MessageOutSchema
 */
export interface MessageOutSchema {
    /**
     * 
     * @type {any}
     * @memberof MessageOutSchema
     */
    'detail': any;
}
/**
 * Pydantic schema for showing Movie card.
 * @export
 * @interface MovieCardOutSchema
 */
export interface MovieCardOutSchema {
    /**
     * 
     * @type {ImageOutSchema}
     * @memberof MovieCardOutSchema
     */
    'card_img': ImageOutSchema;
    /**
     * 
     * @type {any}
     * @memberof MovieCardOutSchema
     */
    'techs': any;
    /**
     * 
     * @type {any}
     * @memberof MovieCardOutSchema
     */
    'released': any;
    /**
     * 
     * @type {any}
     * @memberof MovieCardOutSchema
     */
    'name': any;
    /**
     * 
     * @type {any}
     * @memberof MovieCardOutSchema
     */
    'legal_age'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieCardOutSchema
     */
    'slug'?: any;
}
/**
 * Pydantic schema for creating Movies to server side.
 * @export
 * @interface MovieInSchema
 */
export interface MovieInSchema {
    /**
     * 
     * @type {any}
     * @memberof MovieInSchema
     */
    'seo_title': any;
    /**
     * 
     * @type {any}
     * @memberof MovieInSchema
     */
    'seo_description': any;
    /**
     * 
     * @type {ImageInSchema}
     * @memberof MovieInSchema
     */
    'seo_image': ImageInSchema;
    /**
     * 
     * @type {any}
     * @memberof MovieInSchema
     */
    'name_uk': any;
    /**
     * 
     * @type {any}
     * @memberof MovieInSchema
     */
    'name_ru': any;
    /**
     * 
     * @type {any}
     * @memberof MovieInSchema
     */
    'description_uk': any;
    /**
     * 
     * @type {any}
     * @memberof MovieInSchema
     */
    'description_ru': any;
    /**
     * 
     * @type {ImageInSchema}
     * @memberof MovieInSchema
     */
    'card_img': ImageInSchema;
    /**
     * 
     * @type {any}
     * @memberof MovieInSchema
     */
    'trailer_link': any;
    /**
     * 
     * @type {any}
     * @memberof MovieInSchema
     */
    'year': any;
    /**
     * 
     * @type {any}
     * @memberof MovieInSchema
     */
    'budget': any;
    /**
     * 
     * @type {any}
     * @memberof MovieInSchema
     */
    'legal_age'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieInSchema
     */
    'duration': any;
    /**
     * 
     * @type {any}
     * @memberof MovieInSchema
     */
    'released': any;
    /**
     * 
     * @type {any}
     * @memberof MovieInSchema
     */
    'genres': any;
    /**
     * 
     * @type {any}
     * @memberof MovieInSchema
     */
    'countries': any;
    /**
     * 
     * @type {any}
     * @memberof MovieInSchema
     */
    'gallery'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieInSchema
     */
    'participants': any;
    /**
     * 
     * @type {any}
     * @memberof MovieInSchema
     */
    'techs': any;
}
/**
 * Pydantic schema for showing Movie full data.
 * @export
 * @interface MovieOutSchema
 */
export interface MovieOutSchema {
    /**
     * 
     * @type {ImageOutSchema}
     * @memberof MovieOutSchema
     */
    'card_img': ImageOutSchema;
    /**
     * 
     * @type {ImageOutSchema}
     * @memberof MovieOutSchema
     */
    'seo_image': ImageOutSchema;
    /**
     * 
     * @type {any}
     * @memberof MovieOutSchema
     */
    'genres': any;
    /**
     * 
     * @type {any}
     * @memberof MovieOutSchema
     */
    'techs': any;
    /**
     * 
     * @type {any}
     * @memberof MovieOutSchema
     */
    'countries': any;
    /**
     * 
     * @type {any}
     * @memberof MovieOutSchema
     */
    'released': any;
    /**
     * 
     * @type {any}
     * @memberof MovieOutSchema
     */
    'name_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieOutSchema
     */
    'name_ru'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieOutSchema
     */
    'description_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieOutSchema
     */
    'description_ru'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieOutSchema
     */
    'gallery'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieOutSchema
     */
    'slug'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieOutSchema
     */
    'duration': any;
    /**
     * 
     * @type {any}
     * @memberof MovieOutSchema
     */
    'legal_age'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieOutSchema
     */
    'trailer_link': any;
    /**
     * 
     * @type {any}
     * @memberof MovieOutSchema
     */
    'year': any;
    /**
     * 
     * @type {any}
     * @memberof MovieOutSchema
     */
    'budget': any;
    /**
     * 
     * @type {any}
     * @memberof MovieOutSchema
     */
    'participants': any;
    /**
     * 
     * @type {any}
     * @memberof MovieOutSchema
     */
    'seo_title': any;
    /**
     * 
     * @type {any}
     * @memberof MovieOutSchema
     */
    'seo_description': any;
}
/**
 * Pydantic schema for getting all movie participants in system.
 * @export
 * @interface MovieParticipantOutSchema
 */
export interface MovieParticipantOutSchema {
    /**
     * 
     * @type {any}
     * @memberof MovieParticipantOutSchema
     */
    'display': any;
    /**
     * 
     * @type {any}
     * @memberof MovieParticipantOutSchema
     */
    'id'?: any;
}
/**
 * Pydantic schema for getting all movie participants in system grouped by role.
 * @export
 * @interface MovieParticipantRoleOutSchema
 */
export interface MovieParticipantRoleOutSchema {
    /**
     * 
     * @type {any}
     * @memberof MovieParticipantRoleOutSchema
     */
    'persons': any;
    /**
     * 
     * @type {any}
     * @memberof MovieParticipantRoleOutSchema
     */
    'name'?: any;
}
/**
 * Pydantic schema for getting all movie participants in system.
 * @export
 * @interface MovieParticipantSelectOutSchema
 */
export interface MovieParticipantSelectOutSchema {
    /**
     * 
     * @type {any}
     * @memberof MovieParticipantSelectOutSchema
     */
    'name': any;
    /**
     * 
     * @type {any}
     * @memberof MovieParticipantSelectOutSchema
     */
    'id'?: any;
}
/**
 * Pydantic schema for updating Movie.
 * @export
 * @interface MovieUpdateSchema
 */
export interface MovieUpdateSchema {
    /**
     * 
     * @type {any}
     * @memberof MovieUpdateSchema
     */
    'seo_title'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieUpdateSchema
     */
    'seo_description'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieUpdateSchema
     */
    'seo_image'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieUpdateSchema
     */
    'name_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieUpdateSchema
     */
    'name_ru'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieUpdateSchema
     */
    'description_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieUpdateSchema
     */
    'description_ru'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieUpdateSchema
     */
    'card_img'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieUpdateSchema
     */
    'trailer_link'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieUpdateSchema
     */
    'year'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieUpdateSchema
     */
    'budget'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieUpdateSchema
     */
    'duration'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieUpdateSchema
     */
    'genres'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieUpdateSchema
     */
    'countries'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieUpdateSchema
     */
    'gallery'?: any;
    /**
     * 
     * @type {any}
     * @memberof MovieUpdateSchema
     */
    'participants'?: any;
}
/**
 * Pydantic schema for showing news and promo card.
 * @export
 * @interface NewsPromoCardOutSchema
 */
export interface NewsPromoCardOutSchema {
    /**
     * 
     * @type {any}
     * @memberof NewsPromoCardOutSchema
     */
    'name'?: any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoCardOutSchema
     */
    'date_created'?: any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoCardOutSchema
     */
    'active': any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoCardOutSchema
     */
    'slug'?: any;
}
/**
 * Pydantic schema for creating news and promos to server side.
 * @export
 * @interface NewsPromoInSchema
 */
export interface NewsPromoInSchema {
    /**
     * 
     * @type {any}
     * @memberof NewsPromoInSchema
     */
    'seo_title': any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoInSchema
     */
    'seo_description': any;
    /**
     * 
     * @type {ImageInSchema}
     * @memberof NewsPromoInSchema
     */
    'seo_image': ImageInSchema;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoInSchema
     */
    'name_uk': any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoInSchema
     */
    'name_ru': any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoInSchema
     */
    'description_uk': any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoInSchema
     */
    'description_ru': any;
    /**
     * 
     * @type {ImageInSchema}
     * @memberof NewsPromoInSchema
     */
    'banner': ImageInSchema;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoInSchema
     */
    'active': any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoInSchema
     */
    'promo': any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoInSchema
     */
    'video_link': any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoInSchema
     */
    'gallery'?: any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoInSchema
     */
    'tags': any;
}
/**
 * Pydantic schema for showing news and promo full data.
 * @export
 * @interface NewsPromoOutSchema
 */
export interface NewsPromoOutSchema {
    /**
     * 
     * @type {ImageOutSchema}
     * @memberof NewsPromoOutSchema
     */
    'banner': ImageOutSchema;
    /**
     * 
     * @type {ImageOutSchema}
     * @memberof NewsPromoOutSchema
     */
    'seo_image': ImageOutSchema;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoOutSchema
     */
    'seo_title': any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoOutSchema
     */
    'seo_description': any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoOutSchema
     */
    'name_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoOutSchema
     */
    'name_ru'?: any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoOutSchema
     */
    'description_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoOutSchema
     */
    'description_ru'?: any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoOutSchema
     */
    'active': any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoOutSchema
     */
    'promo': any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoOutSchema
     */
    'video_link': any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoOutSchema
     */
    'gallery'?: any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoOutSchema
     */
    'tags': any;
}
/**
 * Pydantic schema for updating news and promo.
 * @export
 * @interface NewsPromoUpdateSchema
 */
export interface NewsPromoUpdateSchema {
    /**
     * 
     * @type {any}
     * @memberof NewsPromoUpdateSchema
     */
    'seo_title'?: any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoUpdateSchema
     */
    'seo_description'?: any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoUpdateSchema
     */
    'seo_image'?: any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoUpdateSchema
     */
    'name_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoUpdateSchema
     */
    'name_ru'?: any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoUpdateSchema
     */
    'description_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoUpdateSchema
     */
    'description_ru'?: any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoUpdateSchema
     */
    'banner'?: any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoUpdateSchema
     */
    'active'?: any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoUpdateSchema
     */
    'video_link'?: any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoUpdateSchema
     */
    'gallery'?: any;
    /**
     * 
     * @type {any}
     * @memberof NewsPromoUpdateSchema
     */
    'tags'?: any;
}
/**
 * Pydantic schema for showing pages card.
 * @export
 * @interface PageCardOutSchema
 */
export interface PageCardOutSchema {
    /**
     * 
     * @type {any}
     * @memberof PageCardOutSchema
     */
    'name'?: any;
    /**
     * 
     * @type {any}
     * @memberof PageCardOutSchema
     */
    'date_created'?: any;
    /**
     * 
     * @type {any}
     * @memberof PageCardOutSchema
     */
    'active': any;
    /**
     * 
     * @type {any}
     * @memberof PageCardOutSchema
     */
    'can_delete'?: any;
    /**
     * 
     * @type {any}
     * @memberof PageCardOutSchema
     */
    'slug'?: any;
}
/**
 * Pydantic schema for creating pages to server side.
 * @export
 * @interface PageInSchema
 */
export interface PageInSchema {
    /**
     * 
     * @type {any}
     * @memberof PageInSchema
     */
    'seo_title': any;
    /**
     * 
     * @type {any}
     * @memberof PageInSchema
     */
    'seo_description': any;
    /**
     * 
     * @type {ImageInSchema}
     * @memberof PageInSchema
     */
    'seo_image': ImageInSchema;
    /**
     * 
     * @type {any}
     * @memberof PageInSchema
     */
    'name_uk': any;
    /**
     * 
     * @type {any}
     * @memberof PageInSchema
     */
    'name_ru': any;
    /**
     * 
     * @type {any}
     * @memberof PageInSchema
     */
    'content_uk': any;
    /**
     * 
     * @type {any}
     * @memberof PageInSchema
     */
    'content_ru': any;
    /**
     * 
     * @type {ImageInSchema}
     * @memberof PageInSchema
     */
    'banner': ImageInSchema;
    /**
     * 
     * @type {any}
     * @memberof PageInSchema
     */
    'active': any;
    /**
     * 
     * @type {any}
     * @memberof PageInSchema
     */
    'gallery'?: any;
}
/**
 * Pydantic schema for showing pages full data.
 * @export
 * @interface PageOutSchema
 */
export interface PageOutSchema {
    /**
     * 
     * @type {ImageOutSchema}
     * @memberof PageOutSchema
     */
    'banner': ImageOutSchema;
    /**
     * 
     * @type {ImageOutSchema}
     * @memberof PageOutSchema
     */
    'seo_image': ImageOutSchema;
    /**
     * 
     * @type {any}
     * @memberof PageOutSchema
     */
    'seo_title': any;
    /**
     * 
     * @type {any}
     * @memberof PageOutSchema
     */
    'seo_description': any;
    /**
     * 
     * @type {any}
     * @memberof PageOutSchema
     */
    'name_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof PageOutSchema
     */
    'name_ru'?: any;
    /**
     * 
     * @type {any}
     * @memberof PageOutSchema
     */
    'content_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof PageOutSchema
     */
    'content_ru'?: any;
    /**
     * 
     * @type {any}
     * @memberof PageOutSchema
     */
    'active': any;
    /**
     * 
     * @type {any}
     * @memberof PageOutSchema
     */
    'can_delete'?: any;
    /**
     * 
     * @type {any}
     * @memberof PageOutSchema
     */
    'gallery'?: any;
}
/**
 * Pydantic schema for updating pages.
 * @export
 * @interface PageUpdateSchema
 */
export interface PageUpdateSchema {
    /**
     * 
     * @type {any}
     * @memberof PageUpdateSchema
     */
    'seo_title'?: any;
    /**
     * 
     * @type {any}
     * @memberof PageUpdateSchema
     */
    'seo_description'?: any;
    /**
     * 
     * @type {any}
     * @memberof PageUpdateSchema
     */
    'seo_image'?: any;
    /**
     * 
     * @type {any}
     * @memberof PageUpdateSchema
     */
    'name_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof PageUpdateSchema
     */
    'name_ru'?: any;
    /**
     * 
     * @type {any}
     * @memberof PageUpdateSchema
     */
    'content_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof PageUpdateSchema
     */
    'content_ru'?: any;
    /**
     * 
     * @type {any}
     * @memberof PageUpdateSchema
     */
    'banner'?: any;
    /**
     * 
     * @type {any}
     * @memberof PageUpdateSchema
     */
    'active'?: any;
    /**
     * 
     * @type {any}
     * @memberof PageUpdateSchema
     */
    'gallery'?: any;
}
/**
 * 
 * @export
 * @interface PaginatedResponseSchemaCinemaCardOutSchema
 */
export interface PaginatedResponseSchemaCinemaCardOutSchema {
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaCinemaCardOutSchema
     */
    'count': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaCinemaCardOutSchema
     */
    'next': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaCinemaCardOutSchema
     */
    'previous': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaCinemaCardOutSchema
     */
    'results': any;
}
/**
 * 
 * @export
 * @interface PaginatedResponseSchemaHallCardOutSchema
 */
export interface PaginatedResponseSchemaHallCardOutSchema {
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaHallCardOutSchema
     */
    'count': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaHallCardOutSchema
     */
    'next': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaHallCardOutSchema
     */
    'previous': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaHallCardOutSchema
     */
    'results': any;
}
/**
 * 
 * @export
 * @interface PaginatedResponseSchemaList
 */
export interface PaginatedResponseSchemaList {
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaList
     */
    'count': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaList
     */
    'next': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaList
     */
    'previous': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaList
     */
    'results': any;
}
/**
 * 
 * @export
 * @interface PaginatedResponseSchemaMovieCardOutSchema
 */
export interface PaginatedResponseSchemaMovieCardOutSchema {
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaMovieCardOutSchema
     */
    'count': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaMovieCardOutSchema
     */
    'next': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaMovieCardOutSchema
     */
    'previous': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaMovieCardOutSchema
     */
    'results': any;
}
/**
 * 
 * @export
 * @interface PaginatedResponseSchemaMovieParticipantOutSchema
 */
export interface PaginatedResponseSchemaMovieParticipantOutSchema {
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaMovieParticipantOutSchema
     */
    'count': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaMovieParticipantOutSchema
     */
    'next': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaMovieParticipantOutSchema
     */
    'previous': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaMovieParticipantOutSchema
     */
    'results': any;
}
/**
 * 
 * @export
 * @interface PaginatedResponseSchemaNewsPromoCardOutSchema
 */
export interface PaginatedResponseSchemaNewsPromoCardOutSchema {
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaNewsPromoCardOutSchema
     */
    'count': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaNewsPromoCardOutSchema
     */
    'next': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaNewsPromoCardOutSchema
     */
    'previous': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaNewsPromoCardOutSchema
     */
    'results': any;
}
/**
 * 
 * @export
 * @interface PaginatedResponseSchemaPageCardOutSchema
 */
export interface PaginatedResponseSchemaPageCardOutSchema {
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaPageCardOutSchema
     */
    'count': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaPageCardOutSchema
     */
    'next': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaPageCardOutSchema
     */
    'previous': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaPageCardOutSchema
     */
    'results': any;
}
/**
 * 
 * @export
 * @interface PaginatedResponseSchemaTagOutSchema
 */
export interface PaginatedResponseSchemaTagOutSchema {
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaTagOutSchema
     */
    'count': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaTagOutSchema
     */
    'next': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaTagOutSchema
     */
    'previous': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaTagOutSchema
     */
    'results': any;
}
/**
 * 
 * @export
 * @interface PaginatedResponseSchemaTechOutSchema
 */
export interface PaginatedResponseSchemaTechOutSchema {
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaTechOutSchema
     */
    'count': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaTechOutSchema
     */
    'next': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaTechOutSchema
     */
    'previous': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaTechOutSchema
     */
    'results': any;
}
/**
 * 
 * @export
 * @interface PaginatedResponseSchemaUserOutSchema
 */
export interface PaginatedResponseSchemaUserOutSchema {
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaUserOutSchema
     */
    'count': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaUserOutSchema
     */
    'next': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaUserOutSchema
     */
    'previous': any;
    /**
     * 
     * @type {any}
     * @memberof PaginatedResponseSchemaUserOutSchema
     */
    'results': any;
}
/**
 * 
 * @export
 * @interface ReleaseEnum
 */
export interface ReleaseEnum {
}
/**
 * 
 * @export
 * @interface SpeedEnum
 */
export interface SpeedEnum {
}
/**
 * Pydantic schema for showing tag info.
 * @export
 * @interface TagOutSchema
 */
export interface TagOutSchema {
    /**
     * 
     * @type {any}
     * @memberof TagOutSchema
     */
    'name'?: any;
    /**
     * 
     * @type {any}
     * @memberof TagOutSchema
     */
    'color'?: any;
    /**
     * 
     * @type {any}
     * @memberof TagOutSchema
     */
    'id'?: any;
}
/**
 * Pydantic schema for getting task info.  Purpose of this schema to get task info
 * @export
 * @interface TaskInfoOutSchema
 */
export interface TaskInfoOutSchema {
    /**
     * 
     * @type {any}
     * @memberof TaskInfoOutSchema
     */
    'progress': any;
    /**
     * 
     * @type {any}
     * @memberof TaskInfoOutSchema
     */
    'letters_count': any;
}
/**
 * Pydantic schema for showing Movie techs.
 * @export
 * @interface TechOutSchema
 */
export interface TechOutSchema {
    /**
     * 
     * @type {any}
     * @memberof TechOutSchema
     */
    'name': any;
    /**
     * 
     * @type {any}
     * @memberof TechOutSchema
     */
    'color': any;
    /**
     * 
     * @type {any}
     * @memberof TechOutSchema
     */
    'id'?: any;
}
/**
 * 
 * @export
 * @interface TokenBlacklistInputSchema
 */
export interface TokenBlacklistInputSchema {
    /**
     * 
     * @type {any}
     * @memberof TokenBlacklistInputSchema
     */
    'refresh': any;
}
/**
 * 
 * @export
 * @interface TokenRefreshInputSchema
 */
export interface TokenRefreshInputSchema {
    /**
     * 
     * @type {any}
     * @memberof TokenRefreshInputSchema
     */
    'refresh': any;
}
/**
 * 
 * @export
 * @interface TokenRefreshOutputSchema
 */
export interface TokenRefreshOutputSchema {
    /**
     * 
     * @type {any}
     * @memberof TokenRefreshOutputSchema
     */
    'refresh': any;
    /**
     * 
     * @type {any}
     * @memberof TokenRefreshOutputSchema
     */
    'access': any;
}
/**
 * Pydantic schema for getting Top slider items.
 * @export
 * @interface TopSliderItemOutSchema
 */
export interface TopSliderItemOutSchema {
    /**
     * 
     * @type {ImageOutSchema}
     * @memberof TopSliderItemOutSchema
     */
    'image': ImageOutSchema;
    /**
     * 
     * @type {any}
     * @memberof TopSliderItemOutSchema
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof TopSliderItemOutSchema
     */
    'url'?: any;
    /**
     * 
     * @type {any}
     * @memberof TopSliderItemOutSchema
     */
    'text_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof TopSliderItemOutSchema
     */
    'text_ru'?: any;
}
/**
 * Pydantic schema for updating or creating TopSliderItem.
 * @export
 * @interface TopSliderItemUpdateSchema
 */
export interface TopSliderItemUpdateSchema {
    /**
     * 
     * @type {any}
     * @memberof TopSliderItemUpdateSchema
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof TopSliderItemUpdateSchema
     */
    'url'?: any;
    /**
     * 
     * @type {any}
     * @memberof TopSliderItemUpdateSchema
     */
    'text_uk'?: any;
    /**
     * 
     * @type {any}
     * @memberof TopSliderItemUpdateSchema
     */
    'text_ru'?: any;
    /**
     * 
     * @type {any}
     * @memberof TopSliderItemUpdateSchema
     */
    'image'?: any;
    /**
     * 
     * @type {any}
     * @memberof TopSliderItemUpdateSchema
     */
    'delete': any;
}
/**
 * Pydantic schema for getting Top slider.
 * @export
 * @interface TopSliderOutSchema
 */
export interface TopSliderOutSchema {
    /**
     * 
     * @type {any}
     * @memberof TopSliderOutSchema
     */
    'items': any;
    /**
     * 
     * @type {any}
     * @memberof TopSliderOutSchema
     */
    'speed'?: any;
    /**
     * 
     * @type {any}
     * @memberof TopSliderOutSchema
     */
    'active'?: any;
}
/**
 * Pydantic schema for updating TopSlider.
 * @export
 * @interface TopSliderUpdateSchema
 */
export interface TopSliderUpdateSchema {
    /**
     * 
     * @type {any}
     * @memberof TopSliderUpdateSchema
     */
    'active'?: any;
    /**
     * 
     * @type {any}
     * @memberof TopSliderUpdateSchema
     */
    'speed'?: any;
    /**
     * 
     * @type {any}
     * @memberof TopSliderUpdateSchema
     */
    'items'?: any;
}
/**
 * 
 * @export
 * @interface UserFieldsEnum
 */
export interface UserFieldsEnum {
}
/**
 * Pydantic schema for User.  Purpose of this schema to return user\'s personal data
 * @export
 * @interface UserOutSchema
 */
export interface UserOutSchema {
    /**
     * 
     * @type {any}
     * @memberof UserOutSchema
     */
    'city_display': any;
    /**
     * 
     * @type {any}
     * @memberof UserOutSchema
     */
    'date_joined': any;
    /**
     * 
     * @type {any}
     * @memberof UserOutSchema
     */
    'birthday': any;
    /**
     * 
     * @type {any}
     * @memberof UserOutSchema
     */
    'id'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserOutSchema
     */
    'first_name': any;
    /**
     * 
     * @type {any}
     * @memberof UserOutSchema
     */
    'last_name': any;
    /**
     * 
     * @type {any}
     * @memberof UserOutSchema
     */
    'nickname': any;
    /**
     * 
     * @type {any}
     * @memberof UserOutSchema
     */
    'city': any;
    /**
     * 
     * @type {any}
     * @memberof UserOutSchema
     */
    'man': any;
    /**
     * 
     * @type {any}
     * @memberof UserOutSchema
     */
    'phone_number': any;
    /**
     * 
     * @type {any}
     * @memberof UserOutSchema
     */
    'email': any;
    /**
     * 
     * @type {any}
     * @memberof UserOutSchema
     */
    'address': any;
    /**
     * Указывает, что пользователь имеет все права без явного их назначения.
     * @type {any}
     * @memberof UserOutSchema
     */
    'is_superuser'?: any;
}
/**
 * Pydantic schema for User.  Purpose of this schema to get user\'s personal data for registration
 * @export
 * @interface UserRegisterSchema
 */
export interface UserRegisterSchema {
    /**
     * 
     * @type {any}
     * @memberof UserRegisterSchema
     */
    'first_name': any;
    /**
     * 
     * @type {any}
     * @memberof UserRegisterSchema
     */
    'last_name': any;
    /**
     * 
     * @type {any}
     * @memberof UserRegisterSchema
     */
    'nickname': any;
    /**
     * 
     * @type {any}
     * @memberof UserRegisterSchema
     */
    'man': any;
    /**
     * 
     * @type {any}
     * @memberof UserRegisterSchema
     */
    'phone_number': any;
    /**
     * 
     * @type {any}
     * @memberof UserRegisterSchema
     */
    'email': any;
    /**
     * 
     * @type {any}
     * @memberof UserRegisterSchema
     */
    'address': any;
    /**
     * 
     * @type {any}
     * @memberof UserRegisterSchema
     */
    'city': any;
    /**
     * 
     * @type {any}
     * @memberof UserRegisterSchema
     */
    'birthday': any;
    /**
     * 
     * @type {any}
     * @memberof UserRegisterSchema
     */
    'password1': any;
    /**
     * 
     * @type {any}
     * @memberof UserRegisterSchema
     */
    'password2': any;
}
/**
 * Pydantic schema for update User.  Purpose of this schema to get user\'s personal data for updating
 * @export
 * @interface UserUpdateSchema
 */
export interface UserUpdateSchema {
    /**
     * 
     * @type {any}
     * @memberof UserUpdateSchema
     */
    'first_name'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserUpdateSchema
     */
    'last_name'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserUpdateSchema
     */
    'nickname'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserUpdateSchema
     */
    'man'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserUpdateSchema
     */
    'phone_number'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserUpdateSchema
     */
    'email'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserUpdateSchema
     */
    'address'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserUpdateSchema
     */
    'city'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserUpdateSchema
     */
    'birthday'?: any;
    /**
     * 
     * @type {any}
     * @memberof UserUpdateSchema
     */
    'password'?: any;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Makes refresh token blacklisted.  Please provide:   - **Request body**  data with credentials of user  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Blacklist Token
         * @param {TokenBlacklistInputSchema} tokenBlacklistInputSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blacklistToken: async (tokenBlacklistInputSchema: TokenBlacklistInputSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenBlacklistInputSchema' is not null or undefined
            assertParamExists('blacklistToken', 'tokenBlacklistInputSchema', tokenBlacklistInputSchema)
            const localVarPath = `/api/auth/blacklist`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenBlacklistInputSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint gets cities for user to choose. Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Cities
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCities: async (acceptLanguage?: any, page?: any, pageSize?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/cities/choices/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user\'s personal data by token.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.     - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get My Profile
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyProfile: async (acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/my-profile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user\'s token by provided credentials.  Please provide:   - **Request body**  data with credentials of user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Obtain Token
         * @param {LoginSchema} loginSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        obtainToken: async (loginSchema: LoginSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginSchema' is not null or undefined
            assertParamExists('obtainToken', 'loginSchema', loginSchema)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user\'s new access token by provided refresh token.  Please provide:   - **Request body**  provide here refresh token  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Refresh Token
         * @param {TokenRefreshInputSchema} tokenRefreshInputSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (tokenRefreshInputSchema: TokenRefreshInputSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenRefreshInputSchema' is not null or undefined
            assertParamExists('refreshToken', 'tokenRefreshInputSchema', tokenRefreshInputSchema)
            const localVarPath = `/api/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenRefreshInputSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.       Причини:           1) Ця електронна адреса вже використовується   - **422**: Error: Unprocessable Entity.     Причини:           1) Паролі не співпадають           2) Пароль повинен бути:              * Принаймні одна велика літера              * Принаймні одна мала літера              * Принаймні одна цифра              * Принаймні один спеціальний символ із набору ?!@%^&-              * Мінімальна довжина 8 символів           3) Введено некоректний номер телефону           4) Ім\'я та прізвище повинно починатися з великої літери              (наступні маленькі), доступна кирилиця,            доступні спецсимволи(\'-)     - **500**: Internal server error if an unexpected error occurs.
         * @summary Register
         * @param {UserRegisterSchema} userRegisterSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (userRegisterSchema: UserRegisterSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userRegisterSchema' is not null or undefined
            assertParamExists('register', 'userRegisterSchema', userRegisterSchema)
            const localVarPath = `/api/auth/register/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userRegisterSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user\'s personal data by token.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.     - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Update My Profile
         * @param {UserUpdateSchema} userUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMyProfile: async (userUpdateSchema: UserUpdateSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUpdateSchema' is not null or undefined
            assertParamExists('updateMyProfile', 'userUpdateSchema', userUpdateSchema)
            const localVarPath = `/api/auth/my-profile/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * Makes refresh token blacklisted.  Please provide:   - **Request body**  data with credentials of user  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Blacklist Token
         * @param {TokenBlacklistInputSchema} tokenBlacklistInputSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async blacklistToken(tokenBlacklistInputSchema: TokenBlacklistInputSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.blacklistToken(tokenBlacklistInputSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint gets cities for user to choose. Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Cities
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCities(acceptLanguage?: any, page?: any, pageSize?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseSchemaList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCities(acceptLanguage, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get user\'s personal data by token.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.     - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get My Profile
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyProfile(acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyProfile(acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get user\'s token by provided credentials.  Please provide:   - **Request body**  data with credentials of user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Obtain Token
         * @param {LoginSchema} loginSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async obtainToken(loginSchema: LoginSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponseSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.obtainToken(loginSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get user\'s new access token by provided refresh token.  Please provide:   - **Request body**  provide here refresh token  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Refresh Token
         * @param {TokenRefreshInputSchema} tokenRefreshInputSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(tokenRefreshInputSchema: TokenRefreshInputSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenRefreshOutputSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(tokenRefreshInputSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.       Причини:           1) Ця електронна адреса вже використовується   - **422**: Error: Unprocessable Entity.     Причини:           1) Паролі не співпадають           2) Пароль повинен бути:              * Принаймні одна велика літера              * Принаймні одна мала літера              * Принаймні одна цифра              * Принаймні один спеціальний символ із набору ?!@%^&-              * Мінімальна довжина 8 символів           3) Введено некоректний номер телефону           4) Ім\'я та прізвище повинно починатися з великої літери              (наступні маленькі), доступна кирилиця,            доступні спецсимволи(\'-)     - **500**: Internal server error if an unexpected error occurs.
         * @summary Register
         * @param {UserRegisterSchema} userRegisterSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(userRegisterSchema: UserRegisterSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(userRegisterSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get user\'s personal data by token.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.     - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Update My Profile
         * @param {UserUpdateSchema} userUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMyProfile(userUpdateSchema: UserUpdateSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMyProfile(userUpdateSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * Makes refresh token blacklisted.  Please provide:   - **Request body**  data with credentials of user  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Blacklist Token
         * @param {TokenBlacklistInputSchema} tokenBlacklistInputSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        blacklistToken(tokenBlacklistInputSchema: TokenBlacklistInputSchema, acceptLanguage?: any, options?: any): AxiosPromise<any> {
            return localVarFp.blacklistToken(tokenBlacklistInputSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint gets cities for user to choose. Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Cities
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCities(acceptLanguage?: any, page?: any, pageSize?: any, options?: any): AxiosPromise<PaginatedResponseSchemaList> {
            return localVarFp.getCities(acceptLanguage, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user\'s personal data by token.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.     - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get My Profile
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyProfile(acceptLanguage?: any, options?: any): AxiosPromise<UserOutSchema> {
            return localVarFp.getMyProfile(acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user\'s token by provided credentials.  Please provide:   - **Request body**  data with credentials of user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Obtain Token
         * @param {LoginSchema} loginSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        obtainToken(loginSchema: LoginSchema, acceptLanguage?: any, options?: any): AxiosPromise<LoginResponseSchema> {
            return localVarFp.obtainToken(loginSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user\'s new access token by provided refresh token.  Please provide:   - **Request body**  provide here refresh token  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Refresh Token
         * @param {TokenRefreshInputSchema} tokenRefreshInputSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(tokenRefreshInputSchema: TokenRefreshInputSchema, acceptLanguage?: any, options?: any): AxiosPromise<TokenRefreshOutputSchema> {
            return localVarFp.refreshToken(tokenRefreshInputSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.       Причини:           1) Ця електронна адреса вже використовується   - **422**: Error: Unprocessable Entity.     Причини:           1) Паролі не співпадають           2) Пароль повинен бути:              * Принаймні одна велика літера              * Принаймні одна мала літера              * Принаймні одна цифра              * Принаймні один спеціальний символ із набору ?!@%^&-              * Мінімальна довжина 8 символів           3) Введено некоректний номер телефону           4) Ім\'я та прізвище повинно починатися з великої літери              (наступні маленькі), доступна кирилиця,            доступні спецсимволи(\'-)     - **500**: Internal server error if an unexpected error occurs.
         * @summary Register
         * @param {UserRegisterSchema} userRegisterSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(userRegisterSchema: UserRegisterSchema, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp.register(userRegisterSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user\'s personal data by token.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.     - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Update My Profile
         * @param {UserUpdateSchema} userUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMyProfile(userUpdateSchema: UserUpdateSchema, acceptLanguage?: any, options?: any): AxiosPromise<UserOutSchema> {
            return localVarFp.updateMyProfile(userUpdateSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for blacklistToken operation in AuthApi.
 * @export
 * @interface AuthApiBlacklistTokenRequest
 */
export interface AuthApiBlacklistTokenRequest {
    /**
     * 
     * @type {TokenBlacklistInputSchema}
     * @memberof AuthApiBlacklistToken
     */
    readonly tokenBlacklistInputSchema: TokenBlacklistInputSchema

    /**
     * 
     * @type {any}
     * @memberof AuthApiBlacklistToken
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for getCities operation in AuthApi.
 * @export
 * @interface AuthApiGetCitiesRequest
 */
export interface AuthApiGetCitiesRequest {
    /**
     * 
     * @type {any}
     * @memberof AuthApiGetCities
     */
    readonly acceptLanguage?: any

    /**
     * 
     * @type {any}
     * @memberof AuthApiGetCities
     */
    readonly page?: any

    /**
     * 
     * @type {any}
     * @memberof AuthApiGetCities
     */
    readonly pageSize?: any
}

/**
 * Request parameters for getMyProfile operation in AuthApi.
 * @export
 * @interface AuthApiGetMyProfileRequest
 */
export interface AuthApiGetMyProfileRequest {
    /**
     * 
     * @type {any}
     * @memberof AuthApiGetMyProfile
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for obtainToken operation in AuthApi.
 * @export
 * @interface AuthApiObtainTokenRequest
 */
export interface AuthApiObtainTokenRequest {
    /**
     * 
     * @type {LoginSchema}
     * @memberof AuthApiObtainToken
     */
    readonly loginSchema: LoginSchema

    /**
     * 
     * @type {any}
     * @memberof AuthApiObtainToken
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for refreshToken operation in AuthApi.
 * @export
 * @interface AuthApiRefreshTokenRequest
 */
export interface AuthApiRefreshTokenRequest {
    /**
     * 
     * @type {TokenRefreshInputSchema}
     * @memberof AuthApiRefreshToken
     */
    readonly tokenRefreshInputSchema: TokenRefreshInputSchema

    /**
     * 
     * @type {any}
     * @memberof AuthApiRefreshToken
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for register operation in AuthApi.
 * @export
 * @interface AuthApiRegisterRequest
 */
export interface AuthApiRegisterRequest {
    /**
     * 
     * @type {UserRegisterSchema}
     * @memberof AuthApiRegister
     */
    readonly userRegisterSchema: UserRegisterSchema

    /**
     * 
     * @type {any}
     * @memberof AuthApiRegister
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for updateMyProfile operation in AuthApi.
 * @export
 * @interface AuthApiUpdateMyProfileRequest
 */
export interface AuthApiUpdateMyProfileRequest {
    /**
     * 
     * @type {UserUpdateSchema}
     * @memberof AuthApiUpdateMyProfile
     */
    readonly userUpdateSchema: UserUpdateSchema

    /**
     * 
     * @type {any}
     * @memberof AuthApiUpdateMyProfile
     */
    readonly acceptLanguage?: any
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * Makes refresh token blacklisted.  Please provide:   - **Request body**  data with credentials of user  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Blacklist Token
     * @param {AuthApiBlacklistTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public blacklistToken(requestParameters: AuthApiBlacklistTokenRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).blacklistToken(requestParameters.tokenBlacklistInputSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint gets cities for user to choose. Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Cities
     * @param {AuthApiGetCitiesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getCities(requestParameters: AuthApiGetCitiesRequest = {}, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).getCities(requestParameters.acceptLanguage, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user\'s personal data by token.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.     - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get My Profile
     * @param {AuthApiGetMyProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public getMyProfile(requestParameters: AuthApiGetMyProfileRequest = {}, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).getMyProfile(requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user\'s token by provided credentials.  Please provide:   - **Request body**  data with credentials of user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Obtain Token
     * @param {AuthApiObtainTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public obtainToken(requestParameters: AuthApiObtainTokenRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).obtainToken(requestParameters.loginSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user\'s new access token by provided refresh token.  Please provide:   - **Request body**  provide here refresh token  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Refresh Token
     * @param {AuthApiRefreshTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public refreshToken(requestParameters: AuthApiRefreshTokenRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).refreshToken(requestParameters.tokenRefreshInputSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.       Причини:           1) Ця електронна адреса вже використовується   - **422**: Error: Unprocessable Entity.     Причини:           1) Паролі не співпадають           2) Пароль повинен бути:              * Принаймні одна велика літера              * Принаймні одна мала літера              * Принаймні одна цифра              * Принаймні один спеціальний символ із набору ?!@%^&-              * Мінімальна довжина 8 символів           3) Введено некоректний номер телефону           4) Ім\'я та прізвище повинно починатися з великої літери              (наступні маленькі), доступна кирилиця,            доступні спецсимволи(\'-)     - **500**: Internal server error if an unexpected error occurs.
     * @summary Register
     * @param {AuthApiRegisterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public register(requestParameters: AuthApiRegisterRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).register(requestParameters.userRegisterSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user\'s personal data by token.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **401**: Error: Unauthorized.     - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Update My Profile
     * @param {AuthApiUpdateMyProfileRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public updateMyProfile(requestParameters: AuthApiUpdateMyProfileRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).updateMyProfile(requestParameters.userUpdateSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CinemasApi - axios parameter creator
 * @export
 */
export const CinemasApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create cinema.  Please provide:   - **body**  body for creating new cinema  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.     Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина name 100 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів           5) Введено некоректний номер телефону     - **500**: Internal server error if an unexpected error occurs.  Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Create Cinema
         * @param {CinemaInSchema} cinemaInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCinema: async (cinemaInSchema: CinemaInSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cinemaInSchema' is not null or undefined
            assertParamExists('createCinema', 'cinemaInSchema', cinemaInSchema)
            const localVarPath = `/api/cinema/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cinemaInSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete cinema by id.  Please provide:   - **cnm_slug**  slug of cinema  Returns:   - **200**: Success response with the data.   - **404**: Error: Found.       Причини:           1) Не знайдено: немає збігів кінотеатрів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete Cinema By Slug
         * @param {any} cnmSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCinemaBySlug: async (cnmSlug: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cnmSlug' is not null or undefined
            assertParamExists('deleteCinemaBySlug', 'cnmSlug', cnmSlug)
            const localVarPath = `/api/cinema/{cnm_slug}/`
                .replace(`{${"cnm_slug"}}`, encodeURIComponent(String(cnmSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all cinema cards.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get All Cinema Cards
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCinemaCards: async (acceptLanguage?: any, page?: any, pageSize?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/cinema/all-cards/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create cinema.  Please provide:   - **cnm_slug**  slug of cinema  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів кінотеатрів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Cinema By Slug
         * @param {any} cnmSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCinemaBySlug: async (cnmSlug: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cnmSlug' is not null or undefined
            assertParamExists('getCinemaBySlug', 'cnmSlug', cnmSlug)
            const localVarPath = `/api/cinema/{cnm_slug}/`
                .replace(`{${"cnm_slug"}}`, encodeURIComponent(String(cnmSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update cinema.  Please provide:   - **body**  body for creating new cinema  Returns   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів кінотеатрів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **409**: Error: Conflict.       Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Update Cinema
         * @param {any} cnmSlug 
         * @param {CinemaUpdateSchema} cinemaUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCinema: async (cnmSlug: any, cinemaUpdateSchema: CinemaUpdateSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cnmSlug' is not null or undefined
            assertParamExists('updateCinema', 'cnmSlug', cnmSlug)
            // verify required parameter 'cinemaUpdateSchema' is not null or undefined
            assertParamExists('updateCinema', 'cinemaUpdateSchema', cinemaUpdateSchema)
            const localVarPath = `/api/cinema/{cnm_slug}/`
                .replace(`{${"cnm_slug"}}`, encodeURIComponent(String(cnmSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(cinemaUpdateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CinemasApi - functional programming interface
 * @export
 */
export const CinemasApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CinemasApiAxiosParamCreator(configuration)
    return {
        /**
         * Create cinema.  Please provide:   - **body**  body for creating new cinema  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.     Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина name 100 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів           5) Введено некоректний номер телефону     - **500**: Internal server error if an unexpected error occurs.  Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Create Cinema
         * @param {CinemaInSchema} cinemaInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCinema(cinemaInSchema: CinemaInSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCinema(cinemaInSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete cinema by id.  Please provide:   - **cnm_slug**  slug of cinema  Returns:   - **200**: Success response with the data.   - **404**: Error: Found.       Причини:           1) Не знайдено: немає збігів кінотеатрів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete Cinema By Slug
         * @param {any} cnmSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCinemaBySlug(cnmSlug: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCinemaBySlug(cnmSlug, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all cinema cards.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get All Cinema Cards
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCinemaCards(acceptLanguage?: any, page?: any, pageSize?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseSchemaCinemaCardOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCinemaCards(acceptLanguage, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create cinema.  Please provide:   - **cnm_slug**  slug of cinema  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів кінотеатрів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Cinema By Slug
         * @param {any} cnmSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCinemaBySlug(cnmSlug: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CinemaOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCinemaBySlug(cnmSlug, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update cinema.  Please provide:   - **body**  body for creating new cinema  Returns   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів кінотеатрів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **409**: Error: Conflict.       Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Update Cinema
         * @param {any} cnmSlug 
         * @param {CinemaUpdateSchema} cinemaUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCinema(cnmSlug: any, cinemaUpdateSchema: CinemaUpdateSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCinema(cnmSlug, cinemaUpdateSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CinemasApi - factory interface
 * @export
 */
export const CinemasApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CinemasApiFp(configuration)
    return {
        /**
         * Create cinema.  Please provide:   - **body**  body for creating new cinema  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.     Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина name 100 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів           5) Введено некоректний номер телефону     - **500**: Internal server error if an unexpected error occurs.  Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Create Cinema
         * @param {CinemaInSchema} cinemaInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCinema(cinemaInSchema: CinemaInSchema, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp.createCinema(cinemaInSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete cinema by id.  Please provide:   - **cnm_slug**  slug of cinema  Returns:   - **200**: Success response with the data.   - **404**: Error: Found.       Причини:           1) Не знайдено: немає збігів кінотеатрів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete Cinema By Slug
         * @param {any} cnmSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCinemaBySlug(cnmSlug: any, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp.deleteCinemaBySlug(cnmSlug, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all cinema cards.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get All Cinema Cards
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCinemaCards(acceptLanguage?: any, page?: any, pageSize?: any, options?: any): AxiosPromise<PaginatedResponseSchemaCinemaCardOutSchema> {
            return localVarFp.getAllCinemaCards(acceptLanguage, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Create cinema.  Please provide:   - **cnm_slug**  slug of cinema  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів кінотеатрів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Cinema By Slug
         * @param {any} cnmSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCinemaBySlug(cnmSlug: any, acceptLanguage?: any, options?: any): AxiosPromise<CinemaOutSchema> {
            return localVarFp.getCinemaBySlug(cnmSlug, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Update cinema.  Please provide:   - **body**  body for creating new cinema  Returns   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів кінотеатрів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **409**: Error: Conflict.       Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Update Cinema
         * @param {any} cnmSlug 
         * @param {CinemaUpdateSchema} cinemaUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCinema(cnmSlug: any, cinemaUpdateSchema: CinemaUpdateSchema, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp.updateCinema(cnmSlug, cinemaUpdateSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCinema operation in CinemasApi.
 * @export
 * @interface CinemasApiCreateCinemaRequest
 */
export interface CinemasApiCreateCinemaRequest {
    /**
     * 
     * @type {CinemaInSchema}
     * @memberof CinemasApiCreateCinema
     */
    readonly cinemaInSchema: CinemaInSchema

    /**
     * 
     * @type {any}
     * @memberof CinemasApiCreateCinema
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for deleteCinemaBySlug operation in CinemasApi.
 * @export
 * @interface CinemasApiDeleteCinemaBySlugRequest
 */
export interface CinemasApiDeleteCinemaBySlugRequest {
    /**
     * 
     * @type {any}
     * @memberof CinemasApiDeleteCinemaBySlug
     */
    readonly cnmSlug: any

    /**
     * 
     * @type {any}
     * @memberof CinemasApiDeleteCinemaBySlug
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for getAllCinemaCards operation in CinemasApi.
 * @export
 * @interface CinemasApiGetAllCinemaCardsRequest
 */
export interface CinemasApiGetAllCinemaCardsRequest {
    /**
     * 
     * @type {any}
     * @memberof CinemasApiGetAllCinemaCards
     */
    readonly acceptLanguage?: any

    /**
     * 
     * @type {any}
     * @memberof CinemasApiGetAllCinemaCards
     */
    readonly page?: any

    /**
     * 
     * @type {any}
     * @memberof CinemasApiGetAllCinemaCards
     */
    readonly pageSize?: any
}

/**
 * Request parameters for getCinemaBySlug operation in CinemasApi.
 * @export
 * @interface CinemasApiGetCinemaBySlugRequest
 */
export interface CinemasApiGetCinemaBySlugRequest {
    /**
     * 
     * @type {any}
     * @memberof CinemasApiGetCinemaBySlug
     */
    readonly cnmSlug: any

    /**
     * 
     * @type {any}
     * @memberof CinemasApiGetCinemaBySlug
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for updateCinema operation in CinemasApi.
 * @export
 * @interface CinemasApiUpdateCinemaRequest
 */
export interface CinemasApiUpdateCinemaRequest {
    /**
     * 
     * @type {any}
     * @memberof CinemasApiUpdateCinema
     */
    readonly cnmSlug: any

    /**
     * 
     * @type {CinemaUpdateSchema}
     * @memberof CinemasApiUpdateCinema
     */
    readonly cinemaUpdateSchema: CinemaUpdateSchema

    /**
     * 
     * @type {any}
     * @memberof CinemasApiUpdateCinema
     */
    readonly acceptLanguage?: any
}

/**
 * CinemasApi - object-oriented interface
 * @export
 * @class CinemasApi
 * @extends {BaseAPI}
 */
export class CinemasApi extends BaseAPI {
    /**
     * Create cinema.  Please provide:   - **body**  body for creating new cinema  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.     Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина name 100 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів           5) Введено некоректний номер телефону     - **500**: Internal server error if an unexpected error occurs.  Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
     * @summary Create Cinema
     * @param {CinemasApiCreateCinemaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CinemasApi
     */
    public createCinema(requestParameters: CinemasApiCreateCinemaRequest, options?: AxiosRequestConfig) {
        return CinemasApiFp(this.configuration).createCinema(requestParameters.cinemaInSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete cinema by id.  Please provide:   - **cnm_slug**  slug of cinema  Returns:   - **200**: Success response with the data.   - **404**: Error: Found.       Причини:           1) Не знайдено: немає збігів кінотеатрів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
     * @summary Delete Cinema By Slug
     * @param {CinemasApiDeleteCinemaBySlugRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CinemasApi
     */
    public deleteCinemaBySlug(requestParameters: CinemasApiDeleteCinemaBySlugRequest, options?: AxiosRequestConfig) {
        return CinemasApiFp(this.configuration).deleteCinemaBySlug(requestParameters.cnmSlug, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all cinema cards.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get All Cinema Cards
     * @param {CinemasApiGetAllCinemaCardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CinemasApi
     */
    public getAllCinemaCards(requestParameters: CinemasApiGetAllCinemaCardsRequest = {}, options?: AxiosRequestConfig) {
        return CinemasApiFp(this.configuration).getAllCinemaCards(requestParameters.acceptLanguage, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create cinema.  Please provide:   - **cnm_slug**  slug of cinema  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів кінотеатрів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Cinema By Slug
     * @param {CinemasApiGetCinemaBySlugRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CinemasApi
     */
    public getCinemaBySlug(requestParameters: CinemasApiGetCinemaBySlugRequest, options?: AxiosRequestConfig) {
        return CinemasApiFp(this.configuration).getCinemaBySlug(requestParameters.cnmSlug, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update cinema.  Please provide:   - **body**  body for creating new cinema  Returns   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів кінотеатрів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **409**: Error: Conflict.       Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
     * @summary Update Cinema
     * @param {CinemasApiUpdateCinemaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CinemasApi
     */
    public updateCinema(requestParameters: CinemasApiUpdateCinemaRequest, options?: AxiosRequestConfig) {
        return CinemasApiFp(this.configuration).updateCinema(requestParameters.cnmSlug, requestParameters.cinemaUpdateSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * GalleriesApi - axios parameter creator
 * @export
 */
export const GalleriesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get maximum of gallery fields.  Please provide:   - **gallery_id**  id of gallery we want to get  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.         Причини:         1) Не знайдено: немає збігів галерей            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Gallery By Id
         * @param {any} galleryId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGalleryById: async (galleryId: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'galleryId' is not null or undefined
            assertParamExists('getGalleryById', 'galleryId', galleryId)
            const localVarPath = `/api/gallery/{gallery_id}/`
                .replace(`{${"gallery_id"}}`, encodeURIComponent(String(galleryId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GalleriesApi - functional programming interface
 * @export
 */
export const GalleriesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GalleriesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get maximum of gallery fields.  Please provide:   - **gallery_id**  id of gallery we want to get  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.         Причини:         1) Не знайдено: немає збігів галерей            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Gallery By Id
         * @param {any} galleryId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGalleryById(galleryId: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GalleryItemOutSchema>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGalleryById(galleryId, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GalleriesApi - factory interface
 * @export
 */
export const GalleriesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GalleriesApiFp(configuration)
    return {
        /**
         * Get maximum of gallery fields.  Please provide:   - **gallery_id**  id of gallery we want to get  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.         Причини:         1) Не знайдено: немає збігів галерей            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Gallery By Id
         * @param {any} galleryId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGalleryById(galleryId: any, acceptLanguage?: any, options?: any): AxiosPromise<Array<GalleryItemOutSchema>> {
            return localVarFp.getGalleryById(galleryId, acceptLanguage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getGalleryById operation in GalleriesApi.
 * @export
 * @interface GalleriesApiGetGalleryByIdRequest
 */
export interface GalleriesApiGetGalleryByIdRequest {
    /**
     * 
     * @type {any}
     * @memberof GalleriesApiGetGalleryById
     */
    readonly galleryId: any

    /**
     * 
     * @type {any}
     * @memberof GalleriesApiGetGalleryById
     */
    readonly acceptLanguage?: any
}

/**
 * GalleriesApi - object-oriented interface
 * @export
 * @class GalleriesApi
 * @extends {BaseAPI}
 */
export class GalleriesApi extends BaseAPI {
    /**
     * Get maximum of gallery fields.  Please provide:   - **gallery_id**  id of gallery we want to get  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.         Причини:         1) Не знайдено: немає збігів галерей            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Gallery By Id
     * @param {GalleriesApiGetGalleryByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GalleriesApi
     */
    public getGalleryById(requestParameters: GalleriesApiGetGalleryByIdRequest, options?: AxiosRequestConfig) {
        return GalleriesApiFp(this.configuration).getGalleryById(requestParameters.galleryId, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HallsApi - axios parameter creator
 * @export
 */
export const HallsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create hall.  Please provide:   - **body**  body for creating new hall  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.     Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина number 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Create Hall
         * @param {any} cnmSlug 
         * @param {HallInSchema} hallInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHall: async (cnmSlug: any, hallInSchema: HallInSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cnmSlug' is not null or undefined
            assertParamExists('createHall', 'cnmSlug', cnmSlug)
            // verify required parameter 'hallInSchema' is not null or undefined
            assertParamExists('createHall', 'hallInSchema', hallInSchema)
            const localVarPath = `/api/hall/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (cnmSlug !== undefined) {
                localVarQueryParameter['cnm_slug'] = cnmSlug;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hallInSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete hall by id.  Please provide:   - **hall_id**  id of hall  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів залів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete Hall By Slug
         * @param {any} hallId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHallBySlug: async (hallId: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hallId' is not null or undefined
            assertParamExists('deleteHallBySlug', 'hallId', hallId)
            const localVarPath = `/api/hall/{hall_id}/`
                .replace(`{${"hall_id"}}`, encodeURIComponent(String(hallId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all hall cards.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get All Hall Cards
         * @param {any} cnmSlug 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllHallCards: async (cnmSlug: any, page?: any, pageSize?: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cnmSlug' is not null or undefined
            assertParamExists('getAllHallCards', 'cnmSlug', cnmSlug)
            const localVarPath = `/api/hall/all-cards/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cnmSlug !== undefined) {
                localVarQueryParameter['cnm_slug'] = cnmSlug;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create hall.  Please provide:   - **hall_id**  id of hall  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:           1) Не знайдено: немає збігів залів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Hall By Id
         * @param {any} hallId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHallById: async (hallId: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hallId' is not null or undefined
            assertParamExists('getHallById', 'hallId', hallId)
            const localVarPath = `/api/hall/{hall_id}/`
                .replace(`{${"hall_id"}}`, encodeURIComponent(String(hallId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update hall.  Please provide:   - **body**  body for creating new hall  Returns:   - **200**: Success response with the data.   - **404**: Error: Found.       Причини:           1) Не знайдено: немає збігів залів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **409**: Error: Conflict.       Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина number 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Update Hall
         * @param {any} hallId 
         * @param {HallUpdateSchema} hallUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHall: async (hallId: any, hallUpdateSchema: HallUpdateSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'hallId' is not null or undefined
            assertParamExists('updateHall', 'hallId', hallId)
            // verify required parameter 'hallUpdateSchema' is not null or undefined
            assertParamExists('updateHall', 'hallUpdateSchema', hallUpdateSchema)
            const localVarPath = `/api/hall/{hall_id}/`
                .replace(`{${"hall_id"}}`, encodeURIComponent(String(hallId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(hallUpdateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HallsApi - functional programming interface
 * @export
 */
export const HallsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HallsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create hall.  Please provide:   - **body**  body for creating new hall  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.     Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина number 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Create Hall
         * @param {any} cnmSlug 
         * @param {HallInSchema} hallInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createHall(cnmSlug: any, hallInSchema: HallInSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createHall(cnmSlug, hallInSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete hall by id.  Please provide:   - **hall_id**  id of hall  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів залів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete Hall By Slug
         * @param {any} hallId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteHallBySlug(hallId: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteHallBySlug(hallId, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all hall cards.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get All Hall Cards
         * @param {any} cnmSlug 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllHallCards(cnmSlug: any, page?: any, pageSize?: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseSchemaHallCardOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllHallCards(cnmSlug, page, pageSize, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create hall.  Please provide:   - **hall_id**  id of hall  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:           1) Не знайдено: немає збігів залів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Hall By Id
         * @param {any} hallId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHallById(hallId: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HallOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHallById(hallId, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update hall.  Please provide:   - **body**  body for creating new hall  Returns:   - **200**: Success response with the data.   - **404**: Error: Found.       Причини:           1) Не знайдено: немає збігів залів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **409**: Error: Conflict.       Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина number 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Update Hall
         * @param {any} hallId 
         * @param {HallUpdateSchema} hallUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateHall(hallId: any, hallUpdateSchema: HallUpdateSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateHall(hallId, hallUpdateSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HallsApi - factory interface
 * @export
 */
export const HallsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HallsApiFp(configuration)
    return {
        /**
         * Create hall.  Please provide:   - **body**  body for creating new hall  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.     Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина number 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Create Hall
         * @param {any} cnmSlug 
         * @param {HallInSchema} hallInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createHall(cnmSlug: any, hallInSchema: HallInSchema, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp.createHall(cnmSlug, hallInSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete hall by id.  Please provide:   - **hall_id**  id of hall  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів залів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete Hall By Slug
         * @param {any} hallId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteHallBySlug(hallId: any, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp.deleteHallBySlug(hallId, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all hall cards.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get All Hall Cards
         * @param {any} cnmSlug 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllHallCards(cnmSlug: any, page?: any, pageSize?: any, acceptLanguage?: any, options?: any): AxiosPromise<PaginatedResponseSchemaHallCardOutSchema> {
            return localVarFp.getAllHallCards(cnmSlug, page, pageSize, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Create hall.  Please provide:   - **hall_id**  id of hall  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:           1) Не знайдено: немає збігів залів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Hall By Id
         * @param {any} hallId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHallById(hallId: any, acceptLanguage?: any, options?: any): AxiosPromise<HallOutSchema> {
            return localVarFp.getHallById(hallId, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Update hall.  Please provide:   - **body**  body for creating new hall  Returns:   - **200**: Success response with the data.   - **404**: Error: Found.       Причини:           1) Не знайдено: немає збігів залів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **409**: Error: Conflict.       Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина number 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Update Hall
         * @param {any} hallId 
         * @param {HallUpdateSchema} hallUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateHall(hallId: any, hallUpdateSchema: HallUpdateSchema, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp.updateHall(hallId, hallUpdateSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createHall operation in HallsApi.
 * @export
 * @interface HallsApiCreateHallRequest
 */
export interface HallsApiCreateHallRequest {
    /**
     * 
     * @type {any}
     * @memberof HallsApiCreateHall
     */
    readonly cnmSlug: any

    /**
     * 
     * @type {HallInSchema}
     * @memberof HallsApiCreateHall
     */
    readonly hallInSchema: HallInSchema

    /**
     * 
     * @type {any}
     * @memberof HallsApiCreateHall
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for deleteHallBySlug operation in HallsApi.
 * @export
 * @interface HallsApiDeleteHallBySlugRequest
 */
export interface HallsApiDeleteHallBySlugRequest {
    /**
     * 
     * @type {any}
     * @memberof HallsApiDeleteHallBySlug
     */
    readonly hallId: any

    /**
     * 
     * @type {any}
     * @memberof HallsApiDeleteHallBySlug
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for getAllHallCards operation in HallsApi.
 * @export
 * @interface HallsApiGetAllHallCardsRequest
 */
export interface HallsApiGetAllHallCardsRequest {
    /**
     * 
     * @type {any}
     * @memberof HallsApiGetAllHallCards
     */
    readonly cnmSlug: any

    /**
     * 
     * @type {any}
     * @memberof HallsApiGetAllHallCards
     */
    readonly page?: any

    /**
     * 
     * @type {any}
     * @memberof HallsApiGetAllHallCards
     */
    readonly pageSize?: any

    /**
     * 
     * @type {any}
     * @memberof HallsApiGetAllHallCards
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for getHallById operation in HallsApi.
 * @export
 * @interface HallsApiGetHallByIdRequest
 */
export interface HallsApiGetHallByIdRequest {
    /**
     * 
     * @type {any}
     * @memberof HallsApiGetHallById
     */
    readonly hallId: any

    /**
     * 
     * @type {any}
     * @memberof HallsApiGetHallById
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for updateHall operation in HallsApi.
 * @export
 * @interface HallsApiUpdateHallRequest
 */
export interface HallsApiUpdateHallRequest {
    /**
     * 
     * @type {any}
     * @memberof HallsApiUpdateHall
     */
    readonly hallId: any

    /**
     * 
     * @type {HallUpdateSchema}
     * @memberof HallsApiUpdateHall
     */
    readonly hallUpdateSchema: HallUpdateSchema

    /**
     * 
     * @type {any}
     * @memberof HallsApiUpdateHall
     */
    readonly acceptLanguage?: any
}

/**
 * HallsApi - object-oriented interface
 * @export
 * @class HallsApi
 * @extends {BaseAPI}
 */
export class HallsApi extends BaseAPI {
    /**
     * Create hall.  Please provide:   - **body**  body for creating new hall  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.     Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина number 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
     * @summary Create Hall
     * @param {HallsApiCreateHallRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HallsApi
     */
    public createHall(requestParameters: HallsApiCreateHallRequest, options?: AxiosRequestConfig) {
        return HallsApiFp(this.configuration).createHall(requestParameters.cnmSlug, requestParameters.hallInSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete hall by id.  Please provide:   - **hall_id**  id of hall  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів залів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
     * @summary Delete Hall By Slug
     * @param {HallsApiDeleteHallBySlugRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HallsApi
     */
    public deleteHallBySlug(requestParameters: HallsApiDeleteHallBySlugRequest, options?: AxiosRequestConfig) {
        return HallsApiFp(this.configuration).deleteHallBySlug(requestParameters.hallId, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all hall cards.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get All Hall Cards
     * @param {HallsApiGetAllHallCardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HallsApi
     */
    public getAllHallCards(requestParameters: HallsApiGetAllHallCardsRequest, options?: AxiosRequestConfig) {
        return HallsApiFp(this.configuration).getAllHallCards(requestParameters.cnmSlug, requestParameters.page, requestParameters.pageSize, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create hall.  Please provide:   - **hall_id**  id of hall  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:           1) Не знайдено: немає збігів залів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Hall By Id
     * @param {HallsApiGetHallByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HallsApi
     */
    public getHallById(requestParameters: HallsApiGetHallByIdRequest, options?: AxiosRequestConfig) {
        return HallsApiFp(this.configuration).getHallById(requestParameters.hallId, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update hall.  Please provide:   - **body**  body for creating new hall  Returns:   - **200**: Success response with the data.   - **404**: Error: Found.       Причини:           1) Не знайдено: немає збігів залів            на заданному запиті.           2) Не знайдено: немає збігів картинок            на заданному запиті.     - **409**: Error: Conflict.       Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина number 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
     * @summary Update Hall
     * @param {HallsApiUpdateHallRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HallsApi
     */
    public updateHall(requestParameters: HallsApiUpdateHallRequest, options?: AxiosRequestConfig) {
        return HallsApiFp(this.configuration).updateHall(requestParameters.hallId, requestParameters.hallUpdateSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MailingApi - axios parameter creator
 * @export
 */
export const MailingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create template for mailing.  Please provide:   - **file**  file for new template  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.     Причини:           1) Дозволено відправляти тільки html           2) Максимально дозволений розмір файлу 1MB     - **500**: Internal server error if an unexpected error occurs.
         * @summary Create Template
         * @param {any} file 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate: async (file: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'file' is not null or undefined
            assertParamExists('createTemplate', 'file', file)
            const localVarPath = `/api/mailing/template/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


            if (file !== undefined) { 
                localVarFormParams.append('file', new Blob([JSON.stringify(file)], { type: "application/json", }));
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete template for mailing by id.  Returns:   - **200**: Success response with the data.   - **400**: Error: Not Found.      Причини:           1) Не можна видаляти шаблони поки йде розсилання.   - **404**: Error: Not Found.      Причини:           1) Не знайдено: немає збігів шаблонів            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete Template
         * @param {any} tempId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate: async (tempId: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tempId' is not null or undefined
            assertParamExists('deleteTemplate', 'tempId', tempId)
            const localVarPath = `/api/mailing/template/{temp_id}/`
                .replace(`{${"temp_id"}}`, encodeURIComponent(String(tempId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get last 5 templates for mailing.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Templates
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplates: async (acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/mailing/templates/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Start mailing letter to recipients.  Returns:   - **200**: Success response with the data.   - **400**: Error: Not Found.       Причини:           1) Треба зачекати поки закінчиться поточне розсилання.   - **404**: Error: Not Found.      Причини:           1) Не знайдено: немає збігів шаблонів            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Start Mailing
         * @param {MailingInSchema} mailingInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startMailing: async (mailingInSchema: MailingInSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mailingInSchema' is not null or undefined
            assertParamExists('startMailing', 'mailingInSchema', mailingInSchema)
            const localVarPath = `/api/mailing/start/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(mailingInSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get status for current mailing.  Returns:   - **200**: Success response with the data.   - **201**: Success mailing completed.   - **400**: Error: Not Found.       Причини:           1) Hа теперішній час розсилання не активне.   - **404**: Error: Not Found.       Причини:           1) Не знайдено: немає збігів шаблонів            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get status of mailing (Long polling)
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusMailing: async (acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/mailing/status/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MailingApi - functional programming interface
 * @export
 */
export const MailingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MailingApiAxiosParamCreator(configuration)
    return {
        /**
         * Create template for mailing.  Please provide:   - **file**  file for new template  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.     Причини:           1) Дозволено відправляти тільки html           2) Максимально дозволений розмір файлу 1MB     - **500**: Internal server error if an unexpected error occurs.
         * @summary Create Template
         * @param {any} file 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTemplate(file: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MailTemplateOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTemplate(file, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete template for mailing by id.  Returns:   - **200**: Success response with the data.   - **400**: Error: Not Found.      Причини:           1) Не можна видаляти шаблони поки йде розсилання.   - **404**: Error: Not Found.      Причини:           1) Не знайдено: немає збігів шаблонів            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete Template
         * @param {any} tempId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTemplate(tempId: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTemplate(tempId, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get last 5 templates for mailing.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Templates
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTemplates(acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MailTemplateOutSchema>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTemplates(acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Start mailing letter to recipients.  Returns:   - **200**: Success response with the data.   - **400**: Error: Not Found.       Причини:           1) Треба зачекати поки закінчиться поточне розсилання.   - **404**: Error: Not Found.      Причини:           1) Не знайдено: немає збігів шаблонів            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Start Mailing
         * @param {MailingInSchema} mailingInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async startMailing(mailingInSchema: MailingInSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.startMailing(mailingInSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get status for current mailing.  Returns:   - **200**: Success response with the data.   - **201**: Success mailing completed.   - **400**: Error: Not Found.       Причини:           1) Hа теперішній час розсилання не активне.   - **404**: Error: Not Found.       Причини:           1) Не знайдено: немає збігів шаблонів            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get status of mailing (Long polling)
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async statusMailing(acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskInfoOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.statusMailing(acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MailingApi - factory interface
 * @export
 */
export const MailingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MailingApiFp(configuration)
    return {
        /**
         * Create template for mailing.  Please provide:   - **file**  file for new template  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.     Причини:           1) Дозволено відправляти тільки html           2) Максимально дозволений розмір файлу 1MB     - **500**: Internal server error if an unexpected error occurs.
         * @summary Create Template
         * @param {any} file 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTemplate(file: any, acceptLanguage?: any, options?: any): AxiosPromise<MailTemplateOutSchema> {
            return localVarFp.createTemplate(file, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete template for mailing by id.  Returns:   - **200**: Success response with the data.   - **400**: Error: Not Found.      Причини:           1) Не можна видаляти шаблони поки йде розсилання.   - **404**: Error: Not Found.      Причини:           1) Не знайдено: немає збігів шаблонів            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete Template
         * @param {any} tempId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTemplate(tempId: any, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp.deleteTemplate(tempId, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get last 5 templates for mailing.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Templates
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTemplates(acceptLanguage?: any, options?: any): AxiosPromise<Array<MailTemplateOutSchema>> {
            return localVarFp.getTemplates(acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Start mailing letter to recipients.  Returns:   - **200**: Success response with the data.   - **400**: Error: Not Found.       Причини:           1) Треба зачекати поки закінчиться поточне розсилання.   - **404**: Error: Not Found.      Причини:           1) Не знайдено: немає збігів шаблонів            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Start Mailing
         * @param {MailingInSchema} mailingInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        startMailing(mailingInSchema: MailingInSchema, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp.startMailing(mailingInSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get status for current mailing.  Returns:   - **200**: Success response with the data.   - **201**: Success mailing completed.   - **400**: Error: Not Found.       Причини:           1) Hа теперішній час розсилання не активне.   - **404**: Error: Not Found.       Причини:           1) Не знайдено: немає збігів шаблонів            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get status of mailing (Long polling)
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusMailing(acceptLanguage?: any, options?: any): AxiosPromise<TaskInfoOutSchema> {
            return localVarFp.statusMailing(acceptLanguage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTemplate operation in MailingApi.
 * @export
 * @interface MailingApiCreateTemplateRequest
 */
export interface MailingApiCreateTemplateRequest {
    /**
     * 
     * @type {any}
     * @memberof MailingApiCreateTemplate
     */
    readonly file: any

    /**
     * 
     * @type {any}
     * @memberof MailingApiCreateTemplate
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for deleteTemplate operation in MailingApi.
 * @export
 * @interface MailingApiDeleteTemplateRequest
 */
export interface MailingApiDeleteTemplateRequest {
    /**
     * 
     * @type {any}
     * @memberof MailingApiDeleteTemplate
     */
    readonly tempId: any

    /**
     * 
     * @type {any}
     * @memberof MailingApiDeleteTemplate
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for getTemplates operation in MailingApi.
 * @export
 * @interface MailingApiGetTemplatesRequest
 */
export interface MailingApiGetTemplatesRequest {
    /**
     * 
     * @type {any}
     * @memberof MailingApiGetTemplates
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for startMailing operation in MailingApi.
 * @export
 * @interface MailingApiStartMailingRequest
 */
export interface MailingApiStartMailingRequest {
    /**
     * 
     * @type {MailingInSchema}
     * @memberof MailingApiStartMailing
     */
    readonly mailingInSchema: MailingInSchema

    /**
     * 
     * @type {any}
     * @memberof MailingApiStartMailing
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for statusMailing operation in MailingApi.
 * @export
 * @interface MailingApiStatusMailingRequest
 */
export interface MailingApiStatusMailingRequest {
    /**
     * 
     * @type {any}
     * @memberof MailingApiStatusMailing
     */
    readonly acceptLanguage?: any
}

/**
 * MailingApi - object-oriented interface
 * @export
 * @class MailingApi
 * @extends {BaseAPI}
 */
export class MailingApi extends BaseAPI {
    /**
     * Create template for mailing.  Please provide:   - **file**  file for new template  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.     Причини:           1) Дозволено відправляти тільки html           2) Максимально дозволений розмір файлу 1MB     - **500**: Internal server error if an unexpected error occurs.
     * @summary Create Template
     * @param {MailingApiCreateTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailingApi
     */
    public createTemplate(requestParameters: MailingApiCreateTemplateRequest, options?: AxiosRequestConfig) {
        return MailingApiFp(this.configuration).createTemplate(requestParameters.file, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete template for mailing by id.  Returns:   - **200**: Success response with the data.   - **400**: Error: Not Found.      Причини:           1) Не можна видаляти шаблони поки йде розсилання.   - **404**: Error: Not Found.      Причини:           1) Не знайдено: немає збігів шаблонів            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Delete Template
     * @param {MailingApiDeleteTemplateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailingApi
     */
    public deleteTemplate(requestParameters: MailingApiDeleteTemplateRequest, options?: AxiosRequestConfig) {
        return MailingApiFp(this.configuration).deleteTemplate(requestParameters.tempId, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get last 5 templates for mailing.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Templates
     * @param {MailingApiGetTemplatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailingApi
     */
    public getTemplates(requestParameters: MailingApiGetTemplatesRequest = {}, options?: AxiosRequestConfig) {
        return MailingApiFp(this.configuration).getTemplates(requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Start mailing letter to recipients.  Returns:   - **200**: Success response with the data.   - **400**: Error: Not Found.       Причини:           1) Треба зачекати поки закінчиться поточне розсилання.   - **404**: Error: Not Found.      Причини:           1) Не знайдено: немає збігів шаблонів            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Start Mailing
     * @param {MailingApiStartMailingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailingApi
     */
    public startMailing(requestParameters: MailingApiStartMailingRequest, options?: AxiosRequestConfig) {
        return MailingApiFp(this.configuration).startMailing(requestParameters.mailingInSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get status for current mailing.  Returns:   - **200**: Success response with the data.   - **201**: Success mailing completed.   - **400**: Error: Not Found.       Причини:           1) Hа теперішній час розсилання не активне.   - **404**: Error: Not Found.       Причини:           1) Не знайдено: немає збігів шаблонів            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get status of mailing (Long polling)
     * @param {MailingApiStatusMailingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MailingApi
     */
    public statusMailing(requestParameters: MailingApiStatusMailingRequest = {}, options?: AxiosRequestConfig) {
        return MailingApiFp(this.configuration).statusMailing(requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MoviesApi - axios parameter creator
 * @export
 */
export const MoviesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create movie.  Please provide:   - **body**  body for creating new movie  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.     Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина name 100 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.  Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Create Movie
         * @param {MovieInSchema} movieInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMovie: async (movieInSchema: MovieInSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'movieInSchema' is not null or undefined
            assertParamExists('createMovie', 'movieInSchema', movieInSchema)
            const localVarPath = `/api/movie/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(movieInSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete movie by slug.  Please provide:   - **mv_slug**  slug of movie  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів фільмів            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete Movie By Slug
         * @param {any} mvSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMovieBySlug: async (mvSlug: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mvSlug' is not null or undefined
            assertParamExists('deleteMovieBySlug', 'mvSlug', mvSlug)
            const localVarPath = `/api/movie/{mv_slug}/`
                .replace(`{${"mv_slug"}}`, encodeURIComponent(String(mvSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all movie cards.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get All Movie Cards
         * @param {any} [release] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMovieCards: async (release?: any, page?: any, pageSize?: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/movie/all-cards/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (release !== undefined) {
                localVarQueryParameter['release'] = release;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get countries for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Countries
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountries: async (acceptLanguage?: any, page?: any, pageSize?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/movie/countries/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get movie by slug.  Please provide:   - **mv_slug**  slug of movie  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:           1) Не знайдено: немає збігів фільмів            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Movie By Slug
         * @param {any} mvSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMovieBySlug: async (mvSlug: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mvSlug' is not null or undefined
            assertParamExists('getMovieBySlug', 'mvSlug', mvSlug)
            const localVarPath = `/api/movie/{mv_slug}/`
                .replace(`{${"mv_slug"}}`, encodeURIComponent(String(mvSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get genres for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Movie Genres
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMovieGenres: async (acceptLanguage?: any, page?: any, pageSize?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/movie/genres/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get movie legal ages for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Movie Legal Ages
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMovieLegalAges: async (acceptLanguage?: any, page?: any, pageSize?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/movie/legal-ages/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get participants for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Participants
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipants: async (acceptLanguage?: any, page?: any, pageSize?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/movie/participants/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get participants for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Participants Grouped
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipantsGrouped: async (acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/movie/participants-grouped/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get techs for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Techs
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTechs: async (acceptLanguage?: any, page?: any, pageSize?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/movie/techs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update movie by slug.  Please provide:   - **body**  body for creating new movie  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:           1) Не знайдено: немає збігів фільмів            на заданному запиті.     - **409**: Error: Conflict.       Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина name 100 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.  Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Update Movie
         * @param {any} mvSlug 
         * @param {MovieUpdateSchema} movieUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMovie: async (mvSlug: any, movieUpdateSchema: MovieUpdateSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mvSlug' is not null or undefined
            assertParamExists('updateMovie', 'mvSlug', mvSlug)
            // verify required parameter 'movieUpdateSchema' is not null or undefined
            assertParamExists('updateMovie', 'movieUpdateSchema', movieUpdateSchema)
            const localVarPath = `/api/movie/{mv_slug}/`
                .replace(`{${"mv_slug"}}`, encodeURIComponent(String(mvSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(movieUpdateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MoviesApi - functional programming interface
 * @export
 */
export const MoviesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MoviesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create movie.  Please provide:   - **body**  body for creating new movie  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.     Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина name 100 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.  Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Create Movie
         * @param {MovieInSchema} movieInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMovie(movieInSchema: MovieInSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createMovie(movieInSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete movie by slug.  Please provide:   - **mv_slug**  slug of movie  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів фільмів            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete Movie By Slug
         * @param {any} mvSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteMovieBySlug(mvSlug: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteMovieBySlug(mvSlug, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all movie cards.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get All Movie Cards
         * @param {any} [release] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllMovieCards(release?: any, page?: any, pageSize?: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseSchemaMovieCardOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllMovieCards(release, page, pageSize, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get countries for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Countries
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCountries(acceptLanguage?: any, page?: any, pageSize?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseSchemaList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCountries(acceptLanguage, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get movie by slug.  Please provide:   - **mv_slug**  slug of movie  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:           1) Не знайдено: немає збігів фільмів            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Movie By Slug
         * @param {any} mvSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMovieBySlug(mvSlug: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MovieOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMovieBySlug(mvSlug, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get genres for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Movie Genres
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMovieGenres(acceptLanguage?: any, page?: any, pageSize?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseSchemaList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMovieGenres(acceptLanguage, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get movie legal ages for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Movie Legal Ages
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMovieLegalAges(acceptLanguage?: any, page?: any, pageSize?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseSchemaList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMovieLegalAges(acceptLanguage, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get participants for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Participants
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getParticipants(acceptLanguage?: any, page?: any, pageSize?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseSchemaMovieParticipantOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getParticipants(acceptLanguage, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get participants for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Participants Grouped
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getParticipantsGrouped(acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MovieParticipantRoleOutSchema>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getParticipantsGrouped(acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get techs for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Techs
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTechs(acceptLanguage?: any, page?: any, pageSize?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseSchemaTechOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTechs(acceptLanguage, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update movie by slug.  Please provide:   - **body**  body for creating new movie  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:           1) Не знайдено: немає збігів фільмів            на заданному запиті.     - **409**: Error: Conflict.       Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина name 100 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.  Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Update Movie
         * @param {any} mvSlug 
         * @param {MovieUpdateSchema} movieUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMovie(mvSlug: any, movieUpdateSchema: MovieUpdateSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateMovie(mvSlug, movieUpdateSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MoviesApi - factory interface
 * @export
 */
export const MoviesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MoviesApiFp(configuration)
    return {
        /**
         * Create movie.  Please provide:   - **body**  body for creating new movie  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.     Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина name 100 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.  Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Create Movie
         * @param {MovieInSchema} movieInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMovie(movieInSchema: MovieInSchema, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp.createMovie(movieInSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete movie by slug.  Please provide:   - **mv_slug**  slug of movie  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів фільмів            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete Movie By Slug
         * @param {any} mvSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteMovieBySlug(mvSlug: any, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp.deleteMovieBySlug(mvSlug, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all movie cards.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get All Movie Cards
         * @param {any} [release] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllMovieCards(release?: any, page?: any, pageSize?: any, acceptLanguage?: any, options?: any): AxiosPromise<PaginatedResponseSchemaMovieCardOutSchema> {
            return localVarFp.getAllMovieCards(release, page, pageSize, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get countries for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Countries
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountries(acceptLanguage?: any, page?: any, pageSize?: any, options?: any): AxiosPromise<PaginatedResponseSchemaList> {
            return localVarFp.getCountries(acceptLanguage, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get movie by slug.  Please provide:   - **mv_slug**  slug of movie  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:           1) Не знайдено: немає збігів фільмів            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Movie By Slug
         * @param {any} mvSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMovieBySlug(mvSlug: any, acceptLanguage?: any, options?: any): AxiosPromise<MovieOutSchema> {
            return localVarFp.getMovieBySlug(mvSlug, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get genres for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Movie Genres
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMovieGenres(acceptLanguage?: any, page?: any, pageSize?: any, options?: any): AxiosPromise<PaginatedResponseSchemaList> {
            return localVarFp.getMovieGenres(acceptLanguage, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get movie legal ages for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Movie Legal Ages
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMovieLegalAges(acceptLanguage?: any, page?: any, pageSize?: any, options?: any): AxiosPromise<PaginatedResponseSchemaList> {
            return localVarFp.getMovieLegalAges(acceptLanguage, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get participants for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Participants
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipants(acceptLanguage?: any, page?: any, pageSize?: any, options?: any): AxiosPromise<PaginatedResponseSchemaMovieParticipantOutSchema> {
            return localVarFp.getParticipants(acceptLanguage, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get participants for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Participants Grouped
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParticipantsGrouped(acceptLanguage?: any, options?: any): AxiosPromise<Array<MovieParticipantRoleOutSchema>> {
            return localVarFp.getParticipantsGrouped(acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get techs for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Techs
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTechs(acceptLanguage?: any, page?: any, pageSize?: any, options?: any): AxiosPromise<PaginatedResponseSchemaTechOutSchema> {
            return localVarFp.getTechs(acceptLanguage, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Update movie by slug.  Please provide:   - **body**  body for creating new movie  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:           1) Не знайдено: немає збігів фільмів            на заданному запиті.     - **409**: Error: Conflict.       Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина name 100 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.  Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Update Movie
         * @param {any} mvSlug 
         * @param {MovieUpdateSchema} movieUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMovie(mvSlug: any, movieUpdateSchema: MovieUpdateSchema, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp.updateMovie(mvSlug, movieUpdateSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createMovie operation in MoviesApi.
 * @export
 * @interface MoviesApiCreateMovieRequest
 */
export interface MoviesApiCreateMovieRequest {
    /**
     * 
     * @type {MovieInSchema}
     * @memberof MoviesApiCreateMovie
     */
    readonly movieInSchema: MovieInSchema

    /**
     * 
     * @type {any}
     * @memberof MoviesApiCreateMovie
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for deleteMovieBySlug operation in MoviesApi.
 * @export
 * @interface MoviesApiDeleteMovieBySlugRequest
 */
export interface MoviesApiDeleteMovieBySlugRequest {
    /**
     * 
     * @type {any}
     * @memberof MoviesApiDeleteMovieBySlug
     */
    readonly mvSlug: any

    /**
     * 
     * @type {any}
     * @memberof MoviesApiDeleteMovieBySlug
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for getAllMovieCards operation in MoviesApi.
 * @export
 * @interface MoviesApiGetAllMovieCardsRequest
 */
export interface MoviesApiGetAllMovieCardsRequest {
    /**
     * 
     * @type {any}
     * @memberof MoviesApiGetAllMovieCards
     */
    readonly release?: any

    /**
     * 
     * @type {any}
     * @memberof MoviesApiGetAllMovieCards
     */
    readonly page?: any

    /**
     * 
     * @type {any}
     * @memberof MoviesApiGetAllMovieCards
     */
    readonly pageSize?: any

    /**
     * 
     * @type {any}
     * @memberof MoviesApiGetAllMovieCards
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for getCountries operation in MoviesApi.
 * @export
 * @interface MoviesApiGetCountriesRequest
 */
export interface MoviesApiGetCountriesRequest {
    /**
     * 
     * @type {any}
     * @memberof MoviesApiGetCountries
     */
    readonly acceptLanguage?: any

    /**
     * 
     * @type {any}
     * @memberof MoviesApiGetCountries
     */
    readonly page?: any

    /**
     * 
     * @type {any}
     * @memberof MoviesApiGetCountries
     */
    readonly pageSize?: any
}

/**
 * Request parameters for getMovieBySlug operation in MoviesApi.
 * @export
 * @interface MoviesApiGetMovieBySlugRequest
 */
export interface MoviesApiGetMovieBySlugRequest {
    /**
     * 
     * @type {any}
     * @memberof MoviesApiGetMovieBySlug
     */
    readonly mvSlug: any

    /**
     * 
     * @type {any}
     * @memberof MoviesApiGetMovieBySlug
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for getMovieGenres operation in MoviesApi.
 * @export
 * @interface MoviesApiGetMovieGenresRequest
 */
export interface MoviesApiGetMovieGenresRequest {
    /**
     * 
     * @type {any}
     * @memberof MoviesApiGetMovieGenres
     */
    readonly acceptLanguage?: any

    /**
     * 
     * @type {any}
     * @memberof MoviesApiGetMovieGenres
     */
    readonly page?: any

    /**
     * 
     * @type {any}
     * @memberof MoviesApiGetMovieGenres
     */
    readonly pageSize?: any
}

/**
 * Request parameters for getMovieLegalAges operation in MoviesApi.
 * @export
 * @interface MoviesApiGetMovieLegalAgesRequest
 */
export interface MoviesApiGetMovieLegalAgesRequest {
    /**
     * 
     * @type {any}
     * @memberof MoviesApiGetMovieLegalAges
     */
    readonly acceptLanguage?: any

    /**
     * 
     * @type {any}
     * @memberof MoviesApiGetMovieLegalAges
     */
    readonly page?: any

    /**
     * 
     * @type {any}
     * @memberof MoviesApiGetMovieLegalAges
     */
    readonly pageSize?: any
}

/**
 * Request parameters for getParticipants operation in MoviesApi.
 * @export
 * @interface MoviesApiGetParticipantsRequest
 */
export interface MoviesApiGetParticipantsRequest {
    /**
     * 
     * @type {any}
     * @memberof MoviesApiGetParticipants
     */
    readonly acceptLanguage?: any

    /**
     * 
     * @type {any}
     * @memberof MoviesApiGetParticipants
     */
    readonly page?: any

    /**
     * 
     * @type {any}
     * @memberof MoviesApiGetParticipants
     */
    readonly pageSize?: any
}

/**
 * Request parameters for getParticipantsGrouped operation in MoviesApi.
 * @export
 * @interface MoviesApiGetParticipantsGroupedRequest
 */
export interface MoviesApiGetParticipantsGroupedRequest {
    /**
     * 
     * @type {any}
     * @memberof MoviesApiGetParticipantsGrouped
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for getTechs operation in MoviesApi.
 * @export
 * @interface MoviesApiGetTechsRequest
 */
export interface MoviesApiGetTechsRequest {
    /**
     * 
     * @type {any}
     * @memberof MoviesApiGetTechs
     */
    readonly acceptLanguage?: any

    /**
     * 
     * @type {any}
     * @memberof MoviesApiGetTechs
     */
    readonly page?: any

    /**
     * 
     * @type {any}
     * @memberof MoviesApiGetTechs
     */
    readonly pageSize?: any
}

/**
 * Request parameters for updateMovie operation in MoviesApi.
 * @export
 * @interface MoviesApiUpdateMovieRequest
 */
export interface MoviesApiUpdateMovieRequest {
    /**
     * 
     * @type {any}
     * @memberof MoviesApiUpdateMovie
     */
    readonly mvSlug: any

    /**
     * 
     * @type {MovieUpdateSchema}
     * @memberof MoviesApiUpdateMovie
     */
    readonly movieUpdateSchema: MovieUpdateSchema

    /**
     * 
     * @type {any}
     * @memberof MoviesApiUpdateMovie
     */
    readonly acceptLanguage?: any
}

/**
 * MoviesApi - object-oriented interface
 * @export
 * @class MoviesApi
 * @extends {BaseAPI}
 */
export class MoviesApi extends BaseAPI {
    /**
     * Create movie.  Please provide:   - **body**  body for creating new movie  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.     Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина name 100 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.  Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
     * @summary Create Movie
     * @param {MoviesApiCreateMovieRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public createMovie(requestParameters: MoviesApiCreateMovieRequest, options?: AxiosRequestConfig) {
        return MoviesApiFp(this.configuration).createMovie(requestParameters.movieInSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete movie by slug.  Please provide:   - **mv_slug**  slug of movie  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів фільмів            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
     * @summary Delete Movie By Slug
     * @param {MoviesApiDeleteMovieBySlugRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public deleteMovieBySlug(requestParameters: MoviesApiDeleteMovieBySlugRequest, options?: AxiosRequestConfig) {
        return MoviesApiFp(this.configuration).deleteMovieBySlug(requestParameters.mvSlug, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all movie cards.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get All Movie Cards
     * @param {MoviesApiGetAllMovieCardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public getAllMovieCards(requestParameters: MoviesApiGetAllMovieCardsRequest = {}, options?: AxiosRequestConfig) {
        return MoviesApiFp(this.configuration).getAllMovieCards(requestParameters.release, requestParameters.page, requestParameters.pageSize, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get countries for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Countries
     * @param {MoviesApiGetCountriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public getCountries(requestParameters: MoviesApiGetCountriesRequest = {}, options?: AxiosRequestConfig) {
        return MoviesApiFp(this.configuration).getCountries(requestParameters.acceptLanguage, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get movie by slug.  Please provide:   - **mv_slug**  slug of movie  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:           1) Не знайдено: немає збігів фільмів            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Movie By Slug
     * @param {MoviesApiGetMovieBySlugRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public getMovieBySlug(requestParameters: MoviesApiGetMovieBySlugRequest, options?: AxiosRequestConfig) {
        return MoviesApiFp(this.configuration).getMovieBySlug(requestParameters.mvSlug, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get genres for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Movie Genres
     * @param {MoviesApiGetMovieGenresRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public getMovieGenres(requestParameters: MoviesApiGetMovieGenresRequest = {}, options?: AxiosRequestConfig) {
        return MoviesApiFp(this.configuration).getMovieGenres(requestParameters.acceptLanguage, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get movie legal ages for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Movie Legal Ages
     * @param {MoviesApiGetMovieLegalAgesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public getMovieLegalAges(requestParameters: MoviesApiGetMovieLegalAgesRequest = {}, options?: AxiosRequestConfig) {
        return MoviesApiFp(this.configuration).getMovieLegalAges(requestParameters.acceptLanguage, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get participants for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Participants
     * @param {MoviesApiGetParticipantsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public getParticipants(requestParameters: MoviesApiGetParticipantsRequest = {}, options?: AxiosRequestConfig) {
        return MoviesApiFp(this.configuration).getParticipants(requestParameters.acceptLanguage, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get participants for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Participants Grouped
     * @param {MoviesApiGetParticipantsGroupedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public getParticipantsGrouped(requestParameters: MoviesApiGetParticipantsGroupedRequest = {}, options?: AxiosRequestConfig) {
        return MoviesApiFp(this.configuration).getParticipantsGrouped(requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get techs for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Techs
     * @param {MoviesApiGetTechsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public getTechs(requestParameters: MoviesApiGetTechsRequest = {}, options?: AxiosRequestConfig) {
        return MoviesApiFp(this.configuration).getTechs(requestParameters.acceptLanguage, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update movie by slug.  Please provide:   - **body**  body for creating new movie  Returns:   - **200**: Success response with the data.   - **404**: Error: Not Found.       Причини:           1) Не знайдено: немає збігів фільмів            на заданному запиті.     - **409**: Error: Conflict.       Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина name 100 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.  Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
     * @summary Update Movie
     * @param {MoviesApiUpdateMovieRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MoviesApi
     */
    public updateMovie(requestParameters: MoviesApiUpdateMovieRequest, options?: AxiosRequestConfig) {
        return MoviesApiFp(this.configuration).updateMovie(requestParameters.mvSlug, requestParameters.movieUpdateSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * NewsAndPromosApi - axios parameter creator
 * @export
 */
export const NewsAndPromosApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create news_promo.  Please provide:   - **body**  body for creating new news_promo  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.     Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина name 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів           5) Максимальна кількість тегів 5     - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified.             Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified.             Example: *filename.png*            c) optional alt. If you don\'t specify it,             I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified.             Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified.             Example: *filename.png*            c) optional alt. If you don\'t specify it,             I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Create News Promo
         * @param {NewsPromoInSchema} newsPromoInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewsPromo: async (newsPromoInSchema: NewsPromoInSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newsPromoInSchema' is not null or undefined
            assertParamExists('createNewsPromo', 'newsPromoInSchema', newsPromoInSchema)
            const localVarPath = `/api/news-promo/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newsPromoInSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete news_promo by slug.  Please provide:   - **news_promo_slug**  slug of news_promo  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів новин чи акцій            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete News Promo By Slug
         * @param {any} npSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNewsPromoBySlug: async (npSlug: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'npSlug' is not null or undefined
            assertParamExists('deleteNewsPromoBySlug', 'npSlug', npSlug)
            const localVarPath = `/api/news-promo/{np_slug}/`
                .replace(`{${"np_slug"}}`, encodeURIComponent(String(npSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all news_promo cards.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get All News Promo Cards
         * @param {any} promo 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNewsPromoCards: async (promo: any, page?: any, pageSize?: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'promo' is not null or undefined
            assertParamExists('getAllNewsPromoCards', 'promo', promo)
            const localVarPath = `/api/news-promo/all-cards/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (promo !== undefined) {
                localVarQueryParameter['promo'] = promo;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all tags.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get All Tags
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTags: async (acceptLanguage?: any, page?: any, pageSize?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/news-promo/all-tags/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get news or promo by slug.  Please provide slug:   - **news_promo_slug**  slug of news or promo  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів новин чи акцій            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Get News Promo By Slug
         * @param {any} npSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewsPromoBySlug: async (npSlug: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'npSlug' is not null or undefined
            assertParamExists('getNewsPromoBySlug', 'npSlug', npSlug)
            const localVarPath = `/api/news-promo/{np_slug}/`
                .replace(`{${"np_slug"}}`, encodeURIComponent(String(npSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update news_promo.  Please provide:   - **body**  body for creating new news_promo  Returns   - **200**: Success response with the data.   - **409**: Error: Conflict.       Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина name 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів           5) Максимальна кількість тегів 5      - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Update News Promo
         * @param {any} npSlug 
         * @param {NewsPromoUpdateSchema} newsPromoUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNewsPromo: async (npSlug: any, newsPromoUpdateSchema: NewsPromoUpdateSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'npSlug' is not null or undefined
            assertParamExists('updateNewsPromo', 'npSlug', npSlug)
            // verify required parameter 'newsPromoUpdateSchema' is not null or undefined
            assertParamExists('updateNewsPromo', 'newsPromoUpdateSchema', newsPromoUpdateSchema)
            const localVarPath = `/api/news-promo/{np_slug}/`
                .replace(`{${"np_slug"}}`, encodeURIComponent(String(npSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newsPromoUpdateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * NewsAndPromosApi - functional programming interface
 * @export
 */
export const NewsAndPromosApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = NewsAndPromosApiAxiosParamCreator(configuration)
    return {
        /**
         * Create news_promo.  Please provide:   - **body**  body for creating new news_promo  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.     Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина name 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів           5) Максимальна кількість тегів 5     - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified.             Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified.             Example: *filename.png*            c) optional alt. If you don\'t specify it,             I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified.             Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified.             Example: *filename.png*            c) optional alt. If you don\'t specify it,             I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Create News Promo
         * @param {NewsPromoInSchema} newsPromoInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewsPromo(newsPromoInSchema: NewsPromoInSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewsPromo(newsPromoInSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete news_promo by slug.  Please provide:   - **news_promo_slug**  slug of news_promo  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів новин чи акцій            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete News Promo By Slug
         * @param {any} npSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNewsPromoBySlug(npSlug: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNewsPromoBySlug(npSlug, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all news_promo cards.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get All News Promo Cards
         * @param {any} promo 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllNewsPromoCards(promo: any, page?: any, pageSize?: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseSchemaNewsPromoCardOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllNewsPromoCards(promo, page, pageSize, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all tags.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get All Tags
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTags(acceptLanguage?: any, page?: any, pageSize?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseSchemaTagOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTags(acceptLanguage, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get news or promo by slug.  Please provide slug:   - **news_promo_slug**  slug of news or promo  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів новин чи акцій            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Get News Promo By Slug
         * @param {any} npSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNewsPromoBySlug(npSlug: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NewsPromoOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNewsPromoBySlug(npSlug, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update news_promo.  Please provide:   - **body**  body for creating new news_promo  Returns   - **200**: Success response with the data.   - **409**: Error: Conflict.       Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина name 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів           5) Максимальна кількість тегів 5      - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Update News Promo
         * @param {any} npSlug 
         * @param {NewsPromoUpdateSchema} newsPromoUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNewsPromo(npSlug: any, newsPromoUpdateSchema: NewsPromoUpdateSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNewsPromo(npSlug, newsPromoUpdateSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * NewsAndPromosApi - factory interface
 * @export
 */
export const NewsAndPromosApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = NewsAndPromosApiFp(configuration)
    return {
        /**
         * Create news_promo.  Please provide:   - **body**  body for creating new news_promo  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.     Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина name 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів           5) Максимальна кількість тегів 5     - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified.             Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified.             Example: *filename.png*            c) optional alt. If you don\'t specify it,             I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified.             Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified.             Example: *filename.png*            c) optional alt. If you don\'t specify it,             I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Create News Promo
         * @param {NewsPromoInSchema} newsPromoInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewsPromo(newsPromoInSchema: NewsPromoInSchema, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp.createNewsPromo(newsPromoInSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete news_promo by slug.  Please provide:   - **news_promo_slug**  slug of news_promo  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів новин чи акцій            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete News Promo By Slug
         * @param {any} npSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNewsPromoBySlug(npSlug: any, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp.deleteNewsPromoBySlug(npSlug, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all news_promo cards.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get All News Promo Cards
         * @param {any} promo 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNewsPromoCards(promo: any, page?: any, pageSize?: any, acceptLanguage?: any, options?: any): AxiosPromise<PaginatedResponseSchemaNewsPromoCardOutSchema> {
            return localVarFp.getAllNewsPromoCards(promo, page, pageSize, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all tags.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get All Tags
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTags(acceptLanguage?: any, page?: any, pageSize?: any, options?: any): AxiosPromise<PaginatedResponseSchemaTagOutSchema> {
            return localVarFp.getAllTags(acceptLanguage, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get news or promo by slug.  Please provide slug:   - **news_promo_slug**  slug of news or promo  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів новин чи акцій            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Get News Promo By Slug
         * @param {any} npSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNewsPromoBySlug(npSlug: any, acceptLanguage?: any, options?: any): AxiosPromise<NewsPromoOutSchema> {
            return localVarFp.getNewsPromoBySlug(npSlug, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Update news_promo.  Please provide:   - **body**  body for creating new news_promo  Returns   - **200**: Success response with the data.   - **409**: Error: Conflict.       Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина name 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів           5) Максимальна кількість тегів 5      - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Update News Promo
         * @param {any} npSlug 
         * @param {NewsPromoUpdateSchema} newsPromoUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNewsPromo(npSlug: any, newsPromoUpdateSchema: NewsPromoUpdateSchema, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp.updateNewsPromo(npSlug, newsPromoUpdateSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewsPromo operation in NewsAndPromosApi.
 * @export
 * @interface NewsAndPromosApiCreateNewsPromoRequest
 */
export interface NewsAndPromosApiCreateNewsPromoRequest {
    /**
     * 
     * @type {NewsPromoInSchema}
     * @memberof NewsAndPromosApiCreateNewsPromo
     */
    readonly newsPromoInSchema: NewsPromoInSchema

    /**
     * 
     * @type {any}
     * @memberof NewsAndPromosApiCreateNewsPromo
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for deleteNewsPromoBySlug operation in NewsAndPromosApi.
 * @export
 * @interface NewsAndPromosApiDeleteNewsPromoBySlugRequest
 */
export interface NewsAndPromosApiDeleteNewsPromoBySlugRequest {
    /**
     * 
     * @type {any}
     * @memberof NewsAndPromosApiDeleteNewsPromoBySlug
     */
    readonly npSlug: any

    /**
     * 
     * @type {any}
     * @memberof NewsAndPromosApiDeleteNewsPromoBySlug
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for getAllNewsPromoCards operation in NewsAndPromosApi.
 * @export
 * @interface NewsAndPromosApiGetAllNewsPromoCardsRequest
 */
export interface NewsAndPromosApiGetAllNewsPromoCardsRequest {
    /**
     * 
     * @type {any}
     * @memberof NewsAndPromosApiGetAllNewsPromoCards
     */
    readonly promo: any

    /**
     * 
     * @type {any}
     * @memberof NewsAndPromosApiGetAllNewsPromoCards
     */
    readonly page?: any

    /**
     * 
     * @type {any}
     * @memberof NewsAndPromosApiGetAllNewsPromoCards
     */
    readonly pageSize?: any

    /**
     * 
     * @type {any}
     * @memberof NewsAndPromosApiGetAllNewsPromoCards
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for getAllTags operation in NewsAndPromosApi.
 * @export
 * @interface NewsAndPromosApiGetAllTagsRequest
 */
export interface NewsAndPromosApiGetAllTagsRequest {
    /**
     * 
     * @type {any}
     * @memberof NewsAndPromosApiGetAllTags
     */
    readonly acceptLanguage?: any

    /**
     * 
     * @type {any}
     * @memberof NewsAndPromosApiGetAllTags
     */
    readonly page?: any

    /**
     * 
     * @type {any}
     * @memberof NewsAndPromosApiGetAllTags
     */
    readonly pageSize?: any
}

/**
 * Request parameters for getNewsPromoBySlug operation in NewsAndPromosApi.
 * @export
 * @interface NewsAndPromosApiGetNewsPromoBySlugRequest
 */
export interface NewsAndPromosApiGetNewsPromoBySlugRequest {
    /**
     * 
     * @type {any}
     * @memberof NewsAndPromosApiGetNewsPromoBySlug
     */
    readonly npSlug: any

    /**
     * 
     * @type {any}
     * @memberof NewsAndPromosApiGetNewsPromoBySlug
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for updateNewsPromo operation in NewsAndPromosApi.
 * @export
 * @interface NewsAndPromosApiUpdateNewsPromoRequest
 */
export interface NewsAndPromosApiUpdateNewsPromoRequest {
    /**
     * 
     * @type {any}
     * @memberof NewsAndPromosApiUpdateNewsPromo
     */
    readonly npSlug: any

    /**
     * 
     * @type {NewsPromoUpdateSchema}
     * @memberof NewsAndPromosApiUpdateNewsPromo
     */
    readonly newsPromoUpdateSchema: NewsPromoUpdateSchema

    /**
     * 
     * @type {any}
     * @memberof NewsAndPromosApiUpdateNewsPromo
     */
    readonly acceptLanguage?: any
}

/**
 * NewsAndPromosApi - object-oriented interface
 * @export
 * @class NewsAndPromosApi
 * @extends {BaseAPI}
 */
export class NewsAndPromosApi extends BaseAPI {
    /**
     * Create news_promo.  Please provide:   - **body**  body for creating new news_promo  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.     Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина name 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів           5) Максимальна кількість тегів 5     - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified.             Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified.             Example: *filename.png*            c) optional alt. If you don\'t specify it,             I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified.             Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified.             Example: *filename.png*            c) optional alt. If you don\'t specify it,             I\'ll take the value from filename        4. Be sure to specify the field delete=false 
     * @summary Create News Promo
     * @param {NewsAndPromosApiCreateNewsPromoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsAndPromosApi
     */
    public createNewsPromo(requestParameters: NewsAndPromosApiCreateNewsPromoRequest, options?: AxiosRequestConfig) {
        return NewsAndPromosApiFp(this.configuration).createNewsPromo(requestParameters.newsPromoInSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete news_promo by slug.  Please provide:   - **news_promo_slug**  slug of news_promo  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів новин чи акцій            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
     * @summary Delete News Promo By Slug
     * @param {NewsAndPromosApiDeleteNewsPromoBySlugRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsAndPromosApi
     */
    public deleteNewsPromoBySlug(requestParameters: NewsAndPromosApiDeleteNewsPromoBySlugRequest, options?: AxiosRequestConfig) {
        return NewsAndPromosApiFp(this.configuration).deleteNewsPromoBySlug(requestParameters.npSlug, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all news_promo cards.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get All News Promo Cards
     * @param {NewsAndPromosApiGetAllNewsPromoCardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsAndPromosApi
     */
    public getAllNewsPromoCards(requestParameters: NewsAndPromosApiGetAllNewsPromoCardsRequest, options?: AxiosRequestConfig) {
        return NewsAndPromosApiFp(this.configuration).getAllNewsPromoCards(requestParameters.promo, requestParameters.page, requestParameters.pageSize, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all tags.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get All Tags
     * @param {NewsAndPromosApiGetAllTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsAndPromosApi
     */
    public getAllTags(requestParameters: NewsAndPromosApiGetAllTagsRequest = {}, options?: AxiosRequestConfig) {
        return NewsAndPromosApiFp(this.configuration).getAllTags(requestParameters.acceptLanguage, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get news or promo by slug.  Please provide slug:   - **news_promo_slug**  slug of news or promo  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів новин чи акцій            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
     * @summary Get News Promo By Slug
     * @param {NewsAndPromosApiGetNewsPromoBySlugRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsAndPromosApi
     */
    public getNewsPromoBySlug(requestParameters: NewsAndPromosApiGetNewsPromoBySlugRequest, options?: AxiosRequestConfig) {
        return NewsAndPromosApiFp(this.configuration).getNewsPromoBySlug(requestParameters.npSlug, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update news_promo.  Please provide:   - **body**  body for creating new news_promo  Returns   - **200**: Success response with the data.   - **409**: Error: Conflict.       Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина description 20_000 символів           2) Максимальни довжина name 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів           5) Максимальна кількість тегів 5      - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
     * @summary Update News Promo
     * @param {NewsAndPromosApiUpdateNewsPromoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NewsAndPromosApi
     */
    public updateNewsPromo(requestParameters: NewsAndPromosApiUpdateNewsPromoRequest, options?: AxiosRequestConfig) {
        return NewsAndPromosApiFp(this.configuration).updateNewsPromo(requestParameters.npSlug, requestParameters.newsPromoUpdateSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PagesApi - axios parameter creator
 * @export
 */
export const PagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create page.  Please provide:   - **body**  body for creating new page  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.     Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина name 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Create Page
         * @param {PageInSchema} pageInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPage: async (pageInSchema: PageInSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageInSchema' is not null or undefined
            assertParamExists('createPage', 'pageInSchema', pageInSchema)
            const localVarPath = `/api/page/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pageInSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete page by slug.  Please provide:   - **pg_slug**  slug of page  Returns:   - **200**: Success response with the data.     - **406**: Error: Conflict.       Причини:           1) Цю сторінку заборонено видаляти.     - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів сторінок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete Page By Slug
         * @param {any} pgSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePageBySlug: async (pgSlug: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pgSlug' is not null or undefined
            assertParamExists('deletePageBySlug', 'pgSlug', pgSlug)
            const localVarPath = `/api/page/{pg_slug}/`
                .replace(`{${"pg_slug"}}`, encodeURIComponent(String(pgSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all page cards.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get All Page Cards
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPageCards: async (acceptLanguage?: any, page?: any, pageSize?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/page/all-cards/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create page.  Please provide:   - **pg_slug**  slug of page  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів сторінок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Page By Slug
         * @param {any} pgSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageBySlug: async (pgSlug: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pgSlug' is not null or undefined
            assertParamExists('getPageBySlug', 'pgSlug', pgSlug)
            const localVarPath = `/api/page/{pg_slug}/`
                .replace(`{${"pg_slug"}}`, encodeURIComponent(String(pgSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update page.  Please provide:   - **body**  body for creating new page  Returns   - **200**: Success response with the data.   - **409**: Error: Conflict.       Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина name 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Update Page
         * @param {any} pgSlug 
         * @param {PageUpdateSchema} pageUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePage: async (pgSlug: any, pageUpdateSchema: PageUpdateSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pgSlug' is not null or undefined
            assertParamExists('updatePage', 'pgSlug', pgSlug)
            // verify required parameter 'pageUpdateSchema' is not null or undefined
            assertParamExists('updatePage', 'pageUpdateSchema', pageUpdateSchema)
            const localVarPath = `/api/page/{pg_slug}/`
                .replace(`{${"pg_slug"}}`, encodeURIComponent(String(pgSlug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pageUpdateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PagesApi - functional programming interface
 * @export
 */
export const PagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PagesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create page.  Please provide:   - **body**  body for creating new page  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.     Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина name 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Create Page
         * @param {PageInSchema} pageInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPage(pageInSchema: PageInSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPage(pageInSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete page by slug.  Please provide:   - **pg_slug**  slug of page  Returns:   - **200**: Success response with the data.     - **406**: Error: Conflict.       Причини:           1) Цю сторінку заборонено видаляти.     - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів сторінок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete Page By Slug
         * @param {any} pgSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePageBySlug(pgSlug: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePageBySlug(pgSlug, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all page cards.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get All Page Cards
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPageCards(acceptLanguage?: any, page?: any, pageSize?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseSchemaPageCardOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPageCards(acceptLanguage, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create page.  Please provide:   - **pg_slug**  slug of page  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів сторінок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Page By Slug
         * @param {any} pgSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPageBySlug(pgSlug: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPageBySlug(pgSlug, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update page.  Please provide:   - **body**  body for creating new page  Returns   - **200**: Success response with the data.   - **409**: Error: Conflict.       Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина name 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Update Page
         * @param {any} pgSlug 
         * @param {PageUpdateSchema} pageUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePage(pgSlug: any, pageUpdateSchema: PageUpdateSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePage(pgSlug, pageUpdateSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PagesApi - factory interface
 * @export
 */
export const PagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PagesApiFp(configuration)
    return {
        /**
         * Create page.  Please provide:   - **body**  body for creating new page  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.     Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина name 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Create Page
         * @param {PageInSchema} pageInSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPage(pageInSchema: PageInSchema, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp.createPage(pageInSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete page by slug.  Please provide:   - **pg_slug**  slug of page  Returns:   - **200**: Success response with the data.     - **406**: Error: Conflict.       Причини:           1) Цю сторінку заборонено видаляти.     - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів сторінок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete Page By Slug
         * @param {any} pgSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePageBySlug(pgSlug: any, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp.deletePageBySlug(pgSlug, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all page cards.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get All Page Cards
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPageCards(acceptLanguage?: any, page?: any, pageSize?: any, options?: any): AxiosPromise<PaginatedResponseSchemaPageCardOutSchema> {
            return localVarFp.getAllPageCards(acceptLanguage, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Create page.  Please provide:   - **pg_slug**  slug of page  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів сторінок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Page By Slug
         * @param {any} pgSlug 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPageBySlug(pgSlug: any, acceptLanguage?: any, options?: any): AxiosPromise<PageOutSchema> {
            return localVarFp.getPageBySlug(pgSlug, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Update page.  Please provide:   - **body**  body for creating new page  Returns   - **200**: Success response with the data.   - **409**: Error: Conflict.       Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина name 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Update Page
         * @param {any} pgSlug 
         * @param {PageUpdateSchema} pageUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePage(pgSlug: any, pageUpdateSchema: PageUpdateSchema, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp.updatePage(pgSlug, pageUpdateSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPage operation in PagesApi.
 * @export
 * @interface PagesApiCreatePageRequest
 */
export interface PagesApiCreatePageRequest {
    /**
     * 
     * @type {PageInSchema}
     * @memberof PagesApiCreatePage
     */
    readonly pageInSchema: PageInSchema

    /**
     * 
     * @type {any}
     * @memberof PagesApiCreatePage
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for deletePageBySlug operation in PagesApi.
 * @export
 * @interface PagesApiDeletePageBySlugRequest
 */
export interface PagesApiDeletePageBySlugRequest {
    /**
     * 
     * @type {any}
     * @memberof PagesApiDeletePageBySlug
     */
    readonly pgSlug: any

    /**
     * 
     * @type {any}
     * @memberof PagesApiDeletePageBySlug
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for getAllPageCards operation in PagesApi.
 * @export
 * @interface PagesApiGetAllPageCardsRequest
 */
export interface PagesApiGetAllPageCardsRequest {
    /**
     * 
     * @type {any}
     * @memberof PagesApiGetAllPageCards
     */
    readonly acceptLanguage?: any

    /**
     * 
     * @type {any}
     * @memberof PagesApiGetAllPageCards
     */
    readonly page?: any

    /**
     * 
     * @type {any}
     * @memberof PagesApiGetAllPageCards
     */
    readonly pageSize?: any
}

/**
 * Request parameters for getPageBySlug operation in PagesApi.
 * @export
 * @interface PagesApiGetPageBySlugRequest
 */
export interface PagesApiGetPageBySlugRequest {
    /**
     * 
     * @type {any}
     * @memberof PagesApiGetPageBySlug
     */
    readonly pgSlug: any

    /**
     * 
     * @type {any}
     * @memberof PagesApiGetPageBySlug
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for updatePage operation in PagesApi.
 * @export
 * @interface PagesApiUpdatePageRequest
 */
export interface PagesApiUpdatePageRequest {
    /**
     * 
     * @type {any}
     * @memberof PagesApiUpdatePage
     */
    readonly pgSlug: any

    /**
     * 
     * @type {PageUpdateSchema}
     * @memberof PagesApiUpdatePage
     */
    readonly pageUpdateSchema: PageUpdateSchema

    /**
     * 
     * @type {any}
     * @memberof PagesApiUpdatePage
     */
    readonly acceptLanguage?: any
}

/**
 * PagesApi - object-oriented interface
 * @export
 * @class PagesApi
 * @extends {BaseAPI}
 */
export class PagesApi extends BaseAPI {
    /**
     * Create page.  Please provide:   - **body**  body for creating new page  Returns:   - **200**: Success response with the data.   - **409**: Error: Conflict.     Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина name 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
     * @summary Create Page
     * @param {PagesApiCreatePageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    public createPage(requestParameters: PagesApiCreatePageRequest, options?: AxiosRequestConfig) {
        return PagesApiFp(this.configuration).createPage(requestParameters.pageInSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete page by slug.  Please provide:   - **pg_slug**  slug of page  Returns:   - **200**: Success response with the data.     - **406**: Error: Conflict.       Причини:           1) Цю сторінку заборонено видаляти.     - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів сторінок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
     * @summary Delete Page By Slug
     * @param {PagesApiDeletePageBySlugRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    public deletePageBySlug(requestParameters: PagesApiDeletePageBySlugRequest, options?: AxiosRequestConfig) {
        return PagesApiFp(this.configuration).deletePageBySlug(requestParameters.pgSlug, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all page cards.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get All Page Cards
     * @param {PagesApiGetAllPageCardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    public getAllPageCards(requestParameters: PagesApiGetAllPageCardsRequest = {}, options?: AxiosRequestConfig) {
        return PagesApiFp(this.configuration).getAllPageCards(requestParameters.acceptLanguage, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create page.  Please provide:   - **pg_slug**  slug of page  Returns:   - **200**: Success response with the data.   - **404**: Error: Forbidden.       Причини:           1) Не знайдено: немає збігів сторінок            на заданному запиті.     - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Page By Slug
     * @param {PagesApiGetPageBySlugRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    public getPageBySlug(requestParameters: PagesApiGetPageBySlugRequest, options?: AxiosRequestConfig) {
        return PagesApiFp(this.configuration).getPageBySlug(requestParameters.pgSlug, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update page.  Please provide:   - **body**  body for creating new page  Returns   - **200**: Success response with the data.   - **409**: Error: Conflict.       Причини:           1) Поле name повинно бути унікальним. Ця назва вже зайнята   - **422**: Error: Unprocessable Entity.       Причини:           1) Максимальни довжина name 60 символів           3) Максимальни довжина seo_title 60 символів           4) Максимальни довжина seo_description 160 символів     - **500**: Internal server error if an unexpected error occurs.   Operations with gallery items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename    - Create:      1. Do not specify the id field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
     * @summary Update Page
     * @param {PagesApiUpdatePageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PagesApi
     */
    public updatePage(requestParameters: PagesApiUpdatePageRequest, options?: AxiosRequestConfig) {
        return PagesApiFp(this.configuration).updatePage(requestParameters.pgSlug, requestParameters.pageUpdateSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SlidersApi - axios parameter creator
 * @export
 */
export const SlidersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get bottom slider and related items for admin.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Bottom Slider
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBottomSlider: async (acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/slider/bottom/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get get_etend_banner and related items for admin.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Etend Banner
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEtendBanner: async (acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/slider/etend-banner/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get speed choices for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Speed Choices
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpeedChoices: async (acceptLanguage?: any, page?: any, pageSize?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/slider/speed-choices/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get top slider and related items for admin. Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Top Slider
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopSlider: async (acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/slider/top/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update bottom slider and it\'s items.  Please provide:   - **body**  body for updating related items to bottom slider  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.     - **500**: Internal server error if an unexpected error occurs.  Operations with slider items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. It is optional to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. It is not necessary to specify the url field  - Create:      1. Do not specify the id field        2. Be sure to specify the url field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Update Bottom Slider
         * @param {BottomSliderUpdateSchema} bottomSliderUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBottomSlider: async (bottomSliderUpdateSchema: BottomSliderUpdateSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bottomSliderUpdateSchema' is not null or undefined
            assertParamExists('updateBottomSlider', 'bottomSliderUpdateSchema', bottomSliderUpdateSchema)
            const localVarPath = `/api/slider/bottom/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bottomSliderUpdateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update etend_banner and it\'s items.  Please provide:   - **body**  body for updating related items to etend_banner  Returns:   - **200**: Success response with the data.   - **403**: Error: Forbidden.       Причини:     1) Невірний формат кольору було введено   - **422**: Error: Unprocessable Entity.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Update Etend Banner
         * @param {ETEndBBannerUpdateSchema} eTEndBBannerUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEtendBanner: async (eTEndBBannerUpdateSchema: ETEndBBannerUpdateSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eTEndBBannerUpdateSchema' is not null or undefined
            assertParamExists('updateEtendBanner', 'eTEndBBannerUpdateSchema', eTEndBBannerUpdateSchema)
            const localVarPath = `/api/slider/etend-banner/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(eTEndBBannerUpdateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update top slider and it\'s items.  Please provide:   - **body**  body for updating related items to top slider  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.     - **500**: Internal server error if an unexpected error occurs.  Operations with slider items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. It is optional to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. It is not necessary to specify the url field      5. It is not necessary to specify the text_uk, text_ru field  - Create:      1. Do not specify the id field        2. Be sure to specify the url field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false        5. Be sure to specify the text_uk, text_ru field
         * @summary Update Top Slider
         * @param {TopSliderUpdateSchema} topSliderUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTopSlider: async (topSliderUpdateSchema: TopSliderUpdateSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'topSliderUpdateSchema' is not null or undefined
            assertParamExists('updateTopSlider', 'topSliderUpdateSchema', topSliderUpdateSchema)
            const localVarPath = `/api/slider/top/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(topSliderUpdateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SlidersApi - functional programming interface
 * @export
 */
export const SlidersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SlidersApiAxiosParamCreator(configuration)
    return {
        /**
         * Get bottom slider and related items for admin.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Bottom Slider
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBottomSlider(acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BottomSliderOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBottomSlider(acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get get_etend_banner and related items for admin.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Etend Banner
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEtendBanner(acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ETEndBBannerOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEtendBanner(acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get speed choices for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Speed Choices
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpeedChoices(acceptLanguage?: any, page?: any, pageSize?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseSchemaList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpeedChoices(acceptLanguage, page, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get top slider and related items for admin. Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Top Slider
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTopSlider(acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopSliderOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTopSlider(acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update bottom slider and it\'s items.  Please provide:   - **body**  body for updating related items to bottom slider  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.     - **500**: Internal server error if an unexpected error occurs.  Operations with slider items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. It is optional to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. It is not necessary to specify the url field  - Create:      1. Do not specify the id field        2. Be sure to specify the url field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Update Bottom Slider
         * @param {BottomSliderUpdateSchema} bottomSliderUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBottomSlider(bottomSliderUpdateSchema: BottomSliderUpdateSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBottomSlider(bottomSliderUpdateSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update etend_banner and it\'s items.  Please provide:   - **body**  body for updating related items to etend_banner  Returns:   - **200**: Success response with the data.   - **403**: Error: Forbidden.       Причини:     1) Невірний формат кольору було введено   - **422**: Error: Unprocessable Entity.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Update Etend Banner
         * @param {ETEndBBannerUpdateSchema} eTEndBBannerUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEtendBanner(eTEndBBannerUpdateSchema: ETEndBBannerUpdateSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEtendBanner(eTEndBBannerUpdateSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update top slider and it\'s items.  Please provide:   - **body**  body for updating related items to top slider  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.     - **500**: Internal server error if an unexpected error occurs.  Operations with slider items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. It is optional to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. It is not necessary to specify the url field      5. It is not necessary to specify the text_uk, text_ru field  - Create:      1. Do not specify the id field        2. Be sure to specify the url field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false        5. Be sure to specify the text_uk, text_ru field
         * @summary Update Top Slider
         * @param {TopSliderUpdateSchema} topSliderUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTopSlider(topSliderUpdateSchema: TopSliderUpdateSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTopSlider(topSliderUpdateSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SlidersApi - factory interface
 * @export
 */
export const SlidersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SlidersApiFp(configuration)
    return {
        /**
         * Get bottom slider and related items for admin.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Bottom Slider
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBottomSlider(acceptLanguage?: any, options?: any): AxiosPromise<BottomSliderOutSchema> {
            return localVarFp.getBottomSlider(acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get get_etend_banner and related items for admin.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Etend Banner
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEtendBanner(acceptLanguage?: any, options?: any): AxiosPromise<ETEndBBannerOutSchema> {
            return localVarFp.getEtendBanner(acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get speed choices for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Speed Choices
         * @param {any} [acceptLanguage] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpeedChoices(acceptLanguage?: any, page?: any, pageSize?: any, options?: any): AxiosPromise<PaginatedResponseSchemaList> {
            return localVarFp.getSpeedChoices(acceptLanguage, page, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get top slider and related items for admin. Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Top Slider
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTopSlider(acceptLanguage?: any, options?: any): AxiosPromise<TopSliderOutSchema> {
            return localVarFp.getTopSlider(acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Update bottom slider and it\'s items.  Please provide:   - **body**  body for updating related items to bottom slider  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.     - **500**: Internal server error if an unexpected error occurs.  Operations with slider items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. It is optional to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. It is not necessary to specify the url field  - Create:      1. Do not specify the id field        2. Be sure to specify the url field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
         * @summary Update Bottom Slider
         * @param {BottomSliderUpdateSchema} bottomSliderUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBottomSlider(bottomSliderUpdateSchema: BottomSliderUpdateSchema, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp.updateBottomSlider(bottomSliderUpdateSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Update etend_banner and it\'s items.  Please provide:   - **body**  body for updating related items to etend_banner  Returns:   - **200**: Success response with the data.   - **403**: Error: Forbidden.       Причини:     1) Невірний формат кольору було введено   - **422**: Error: Unprocessable Entity.     - **500**: Internal server error if an unexpected error occurs.
         * @summary Update Etend Banner
         * @param {ETEndBBannerUpdateSchema} eTEndBBannerUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEtendBanner(eTEndBBannerUpdateSchema: ETEndBBannerUpdateSchema, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp.updateEtendBanner(eTEndBBannerUpdateSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Update top slider and it\'s items.  Please provide:   - **body**  body for updating related items to top slider  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.     - **500**: Internal server error if an unexpected error occurs.  Operations with slider items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. It is optional to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. It is not necessary to specify the url field      5. It is not necessary to specify the text_uk, text_ru field  - Create:      1. Do not specify the id field        2. Be sure to specify the url field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false        5. Be sure to specify the text_uk, text_ru field
         * @summary Update Top Slider
         * @param {TopSliderUpdateSchema} topSliderUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTopSlider(topSliderUpdateSchema: TopSliderUpdateSchema, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp.updateTopSlider(topSliderUpdateSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getBottomSlider operation in SlidersApi.
 * @export
 * @interface SlidersApiGetBottomSliderRequest
 */
export interface SlidersApiGetBottomSliderRequest {
    /**
     * 
     * @type {any}
     * @memberof SlidersApiGetBottomSlider
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for getEtendBanner operation in SlidersApi.
 * @export
 * @interface SlidersApiGetEtendBannerRequest
 */
export interface SlidersApiGetEtendBannerRequest {
    /**
     * 
     * @type {any}
     * @memberof SlidersApiGetEtendBanner
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for getSpeedChoices operation in SlidersApi.
 * @export
 * @interface SlidersApiGetSpeedChoicesRequest
 */
export interface SlidersApiGetSpeedChoicesRequest {
    /**
     * 
     * @type {any}
     * @memberof SlidersApiGetSpeedChoices
     */
    readonly acceptLanguage?: any

    /**
     * 
     * @type {any}
     * @memberof SlidersApiGetSpeedChoices
     */
    readonly page?: any

    /**
     * 
     * @type {any}
     * @memberof SlidersApiGetSpeedChoices
     */
    readonly pageSize?: any
}

/**
 * Request parameters for getTopSlider operation in SlidersApi.
 * @export
 * @interface SlidersApiGetTopSliderRequest
 */
export interface SlidersApiGetTopSliderRequest {
    /**
     * 
     * @type {any}
     * @memberof SlidersApiGetTopSlider
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for updateBottomSlider operation in SlidersApi.
 * @export
 * @interface SlidersApiUpdateBottomSliderRequest
 */
export interface SlidersApiUpdateBottomSliderRequest {
    /**
     * 
     * @type {BottomSliderUpdateSchema}
     * @memberof SlidersApiUpdateBottomSlider
     */
    readonly bottomSliderUpdateSchema: BottomSliderUpdateSchema

    /**
     * 
     * @type {any}
     * @memberof SlidersApiUpdateBottomSlider
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for updateEtendBanner operation in SlidersApi.
 * @export
 * @interface SlidersApiUpdateEtendBannerRequest
 */
export interface SlidersApiUpdateEtendBannerRequest {
    /**
     * 
     * @type {ETEndBBannerUpdateSchema}
     * @memberof SlidersApiUpdateEtendBanner
     */
    readonly eTEndBBannerUpdateSchema: ETEndBBannerUpdateSchema

    /**
     * 
     * @type {any}
     * @memberof SlidersApiUpdateEtendBanner
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for updateTopSlider operation in SlidersApi.
 * @export
 * @interface SlidersApiUpdateTopSliderRequest
 */
export interface SlidersApiUpdateTopSliderRequest {
    /**
     * 
     * @type {TopSliderUpdateSchema}
     * @memberof SlidersApiUpdateTopSlider
     */
    readonly topSliderUpdateSchema: TopSliderUpdateSchema

    /**
     * 
     * @type {any}
     * @memberof SlidersApiUpdateTopSlider
     */
    readonly acceptLanguage?: any
}

/**
 * SlidersApi - object-oriented interface
 * @export
 * @class SlidersApi
 * @extends {BaseAPI}
 */
export class SlidersApi extends BaseAPI {
    /**
     * Get bottom slider and related items for admin.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Bottom Slider
     * @param {SlidersApiGetBottomSliderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlidersApi
     */
    public getBottomSlider(requestParameters: SlidersApiGetBottomSliderRequest = {}, options?: AxiosRequestConfig) {
        return SlidersApiFp(this.configuration).getBottomSlider(requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get get_etend_banner and related items for admin.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Etend Banner
     * @param {SlidersApiGetEtendBannerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlidersApi
     */
    public getEtendBanner(requestParameters: SlidersApiGetEtendBannerRequest = {}, options?: AxiosRequestConfig) {
        return SlidersApiFp(this.configuration).getEtendBanner(requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get speed choices for input.  Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Speed Choices
     * @param {SlidersApiGetSpeedChoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlidersApi
     */
    public getSpeedChoices(requestParameters: SlidersApiGetSpeedChoicesRequest = {}, options?: AxiosRequestConfig) {
        return SlidersApiFp(this.configuration).getSpeedChoices(requestParameters.acceptLanguage, requestParameters.page, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get top slider and related items for admin. Returns:   - **200**: Success response with the data.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Top Slider
     * @param {SlidersApiGetTopSliderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlidersApi
     */
    public getTopSlider(requestParameters: SlidersApiGetTopSliderRequest = {}, options?: AxiosRequestConfig) {
        return SlidersApiFp(this.configuration).getTopSlider(requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update bottom slider and it\'s items.  Please provide:   - **body**  body for updating related items to bottom slider  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.     - **500**: Internal server error if an unexpected error occurs.  Operations with slider items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. It is optional to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. It is not necessary to specify the url field  - Create:      1. Do not specify the id field        2. Be sure to specify the url field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false 
     * @summary Update Bottom Slider
     * @param {SlidersApiUpdateBottomSliderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlidersApi
     */
    public updateBottomSlider(requestParameters: SlidersApiUpdateBottomSliderRequest, options?: AxiosRequestConfig) {
        return SlidersApiFp(this.configuration).updateBottomSlider(requestParameters.bottomSliderUpdateSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update etend_banner and it\'s items.  Please provide:   - **body**  body for updating related items to etend_banner  Returns:   - **200**: Success response with the data.   - **403**: Error: Forbidden.       Причини:     1) Невірний формат кольору було введено   - **422**: Error: Unprocessable Entity.     - **500**: Internal server error if an unexpected error occurs.
     * @summary Update Etend Banner
     * @param {SlidersApiUpdateEtendBannerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlidersApi
     */
    public updateEtendBanner(requestParameters: SlidersApiUpdateEtendBannerRequest, options?: AxiosRequestConfig) {
        return SlidersApiFp(this.configuration).updateEtendBanner(requestParameters.eTEndBBannerUpdateSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update top slider and it\'s items.  Please provide:   - **body**  body for updating related items to top slider  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.     - **500**: Internal server error if an unexpected error occurs.  Operations with slider items:  - Delete        1. Be sure to specify the id field        2. Be sure to specify the field delete=true    - Update        1. Be sure to specify the id field        2. Be sure to specify the field delete=false        3. It is optional to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. It is not necessary to specify the url field      5. It is not necessary to specify the text_uk, text_ru field  - Create:      1. Do not specify the id field        2. Be sure to specify the url field        3. Be sure to specify the image field            a) required image if filename is specified. Format base64(svg,png,jpg,jpeg,webp)            b) filename is required if image is specified. Example: *filename.png*            c) optional alt. If you don\'t specify it, I\'ll take the value from filename        4. Be sure to specify the field delete=false        5. Be sure to specify the text_uk, text_ru field
     * @summary Update Top Slider
     * @param {SlidersApiUpdateTopSliderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SlidersApi
     */
    public updateTopSlider(requestParameters: SlidersApiUpdateTopSliderRequest, options?: AxiosRequestConfig) {
        return SlidersApiFp(this.configuration).updateTopSlider(requestParameters.topSliderUpdateSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * StatisticApi - axios parameter creator
 * @export
 */
export const StatisticApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get computed numbers of statistic for our site.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Computed Nums
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComputedNums: async (acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/statistic/computed_nums/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get most income movies on site.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Most Income Movies
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMostIncomeMovies: async (acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/statistic/most-income-movies/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get get most popular movies on site.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Most Popular Movies
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMostPopularMovies: async (acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/statistic/most-popular-movies/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get most popular techs on site.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Most Popular Techs
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMostPopularTechs: async (acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/statistic/most-popular-techs/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatisticApi - functional programming interface
 * @export
 */
export const StatisticApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = StatisticApiAxiosParamCreator(configuration)
    return {
        /**
         * Get computed numbers of statistic for our site.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Computed Nums
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getComputedNums(acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getComputedNums(acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get most income movies on site.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Most Income Movies
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMostIncomeMovies(acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMostIncomeMovies(acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get get most popular movies on site.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Most Popular Movies
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMostPopularMovies(acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMostPopularMovies(acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get most popular techs on site.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Most Popular Techs
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMostPopularTechs(acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMostPopularTechs(acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * StatisticApi - factory interface
 * @export
 */
export const StatisticApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = StatisticApiFp(configuration)
    return {
        /**
         * Get computed numbers of statistic for our site.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Computed Nums
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComputedNums(acceptLanguage?: any, options?: any): AxiosPromise<any> {
            return localVarFp.getComputedNums(acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get most income movies on site.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Most Income Movies
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMostIncomeMovies(acceptLanguage?: any, options?: any): AxiosPromise<any> {
            return localVarFp.getMostIncomeMovies(acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get get most popular movies on site.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Most Popular Movies
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMostPopularMovies(acceptLanguage?: any, options?: any): AxiosPromise<any> {
            return localVarFp.getMostPopularMovies(acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Get most popular techs on site.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get Most Popular Techs
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMostPopularTechs(acceptLanguage?: any, options?: any): AxiosPromise<any> {
            return localVarFp.getMostPopularTechs(acceptLanguage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getComputedNums operation in StatisticApi.
 * @export
 * @interface StatisticApiGetComputedNumsRequest
 */
export interface StatisticApiGetComputedNumsRequest {
    /**
     * 
     * @type {any}
     * @memberof StatisticApiGetComputedNums
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for getMostIncomeMovies operation in StatisticApi.
 * @export
 * @interface StatisticApiGetMostIncomeMoviesRequest
 */
export interface StatisticApiGetMostIncomeMoviesRequest {
    /**
     * 
     * @type {any}
     * @memberof StatisticApiGetMostIncomeMovies
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for getMostPopularMovies operation in StatisticApi.
 * @export
 * @interface StatisticApiGetMostPopularMoviesRequest
 */
export interface StatisticApiGetMostPopularMoviesRequest {
    /**
     * 
     * @type {any}
     * @memberof StatisticApiGetMostPopularMovies
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for getMostPopularTechs operation in StatisticApi.
 * @export
 * @interface StatisticApiGetMostPopularTechsRequest
 */
export interface StatisticApiGetMostPopularTechsRequest {
    /**
     * 
     * @type {any}
     * @memberof StatisticApiGetMostPopularTechs
     */
    readonly acceptLanguage?: any
}

/**
 * StatisticApi - object-oriented interface
 * @export
 * @class StatisticApi
 * @extends {BaseAPI}
 */
export class StatisticApi extends BaseAPI {
    /**
     * Get computed numbers of statistic for our site.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Computed Nums
     * @param {StatisticApiGetComputedNumsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticApi
     */
    public getComputedNums(requestParameters: StatisticApiGetComputedNumsRequest = {}, options?: AxiosRequestConfig) {
        return StatisticApiFp(this.configuration).getComputedNums(requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get most income movies on site.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Most Income Movies
     * @param {StatisticApiGetMostIncomeMoviesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticApi
     */
    public getMostIncomeMovies(requestParameters: StatisticApiGetMostIncomeMoviesRequest = {}, options?: AxiosRequestConfig) {
        return StatisticApiFp(this.configuration).getMostIncomeMovies(requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get get most popular movies on site.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Most Popular Movies
     * @param {StatisticApiGetMostPopularMoviesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticApi
     */
    public getMostPopularMovies(requestParameters: StatisticApiGetMostPopularMoviesRequest = {}, options?: AxiosRequestConfig) {
        return StatisticApiFp(this.configuration).getMostPopularMovies(requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get most popular techs on site.  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get Most Popular Techs
     * @param {StatisticApiGetMostPopularTechsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatisticApi
     */
    public getMostPopularTechs(requestParameters: StatisticApiGetMostPopularTechsRequest = {}, options?: AxiosRequestConfig) {
        return StatisticApiFp(this.configuration).getMostPopularTechs(requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **404**: Error: Conflict.       Причини:           1) Не знайдено: немає збігів користувачів            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete User By Id
         * @param {any} userId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserById: async (userId: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('deleteUserById', 'userId', userId)
            const localVarPath = `/api/users/detail/{user_id}/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **404**: Error: Conflict.       Причини:           1) Не знайдено: немає збігів користувачів            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get User By Id
         * @param {any} userId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (userId: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserById', 'userId', userId)
            const localVarPath = `/api/users/detail/{user_id}/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update user by id.  Please provide:   - **Request body**  data for updating user  Returns:   - **200**: Success response with the data.   - **404**: Error: Conflict.       Причини:           1) Не знайдено: немає збігів користувачів            на заданному запиті.   - **422**: Error: Unprocessable Entity.     Причини:           1) Введено некоректний номер телефону           2) Ім\'я та прізвище повинно починатися з великої літери            (наступні маленькі), доступна кирилиця,            доступні спецсимволи(\'-)   - **500**: Internal server error if an unexpected error occurs.
         * @summary Update User By Id
         * @param {any} userId 
         * @param {UserUpdateSchema} userUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserById: async (userId: any, userUpdateSchema: UserUpdateSchema, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('updateUserById', 'userId', userId)
            // verify required parameter 'userUpdateSchema' is not null or undefined
            assertParamExists('updateUserById', 'userUpdateSchema', userUpdateSchema)
            const localVarPath = `/api/users/detail/{user_id}/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Endpoint gets all users.  Makes pagination, search and sorting of records.  Please provide:  - **page**  number of page we want to get  - **page_size**  length of records per page  - **search_line**  helps to find rows which contains search line  - **sort**  define by which field sort rows  - **direction**  determines in which direction to sort  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Users Datatable
         * @param {any} [searchLine] 
         * @param {any} [sort] 
         * @param {any} [direction] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersDatatable: async (searchLine?: any, sort?: any, direction?: any, page?: any, pageSize?: any, acceptLanguage?: any, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/datable/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication CustomJWTAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (searchLine !== undefined) {
                localVarQueryParameter['search_line'] = searchLine;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (acceptLanguage != null) {
                localVarHeaderParameter['Accept-Language'] = typeof acceptLanguage === 'string' 
                    ? acceptLanguage 
                    : JSON.stringify(acceptLanguage);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **404**: Error: Conflict.       Причини:           1) Не знайдено: немає збігів користувачів            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete User By Id
         * @param {any} userId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUserById(userId: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MessageOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUserById(userId, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **404**: Error: Conflict.       Причини:           1) Не знайдено: немає збігів користувачів            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get User By Id
         * @param {any} userId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(userId: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(userId, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update user by id.  Please provide:   - **Request body**  data for updating user  Returns:   - **200**: Success response with the data.   - **404**: Error: Conflict.       Причини:           1) Не знайдено: немає збігів користувачів            на заданному запиті.   - **422**: Error: Unprocessable Entity.     Причини:           1) Введено некоректний номер телефону           2) Ім\'я та прізвище повинно починатися з великої літери            (наступні маленькі), доступна кирилиця,            доступні спецсимволи(\'-)   - **500**: Internal server error if an unexpected error occurs.
         * @summary Update User By Id
         * @param {any} userId 
         * @param {UserUpdateSchema} userUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUserById(userId: any, userUpdateSchema: UserUpdateSchema, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUserById(userId, userUpdateSchema, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Endpoint gets all users.  Makes pagination, search and sorting of records.  Please provide:  - **page**  number of page we want to get  - **page_size**  length of records per page  - **search_line**  helps to find rows which contains search line  - **sort**  define by which field sort rows  - **direction**  determines in which direction to sort  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Users Datatable
         * @param {any} [searchLine] 
         * @param {any} [sort] 
         * @param {any} [direction] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersDatatable(searchLine?: any, sort?: any, direction?: any, page?: any, pageSize?: any, acceptLanguage?: any, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedResponseSchemaUserOutSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersDatatable(searchLine, sort, direction, page, pageSize, acceptLanguage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **404**: Error: Conflict.       Причини:           1) Не знайдено: немає збігів користувачів            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Delete User By Id
         * @param {any} userId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUserById(userId: any, acceptLanguage?: any, options?: any): AxiosPromise<MessageOutSchema> {
            return localVarFp.deleteUserById(userId, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **404**: Error: Conflict.       Причини:           1) Не знайдено: немає збігів користувачів            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Get User By Id
         * @param {any} userId 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(userId: any, acceptLanguage?: any, options?: any): AxiosPromise<UserOutSchema> {
            return localVarFp.getUserById(userId, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Update user by id.  Please provide:   - **Request body**  data for updating user  Returns:   - **200**: Success response with the data.   - **404**: Error: Conflict.       Причини:           1) Не знайдено: немає збігів користувачів            на заданному запиті.   - **422**: Error: Unprocessable Entity.     Причини:           1) Введено некоректний номер телефону           2) Ім\'я та прізвище повинно починатися з великої літери            (наступні маленькі), доступна кирилиця,            доступні спецсимволи(\'-)   - **500**: Internal server error if an unexpected error occurs.
         * @summary Update User By Id
         * @param {any} userId 
         * @param {UserUpdateSchema} userUpdateSchema 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUserById(userId: any, userUpdateSchema: UserUpdateSchema, acceptLanguage?: any, options?: any): AxiosPromise<UserOutSchema> {
            return localVarFp.updateUserById(userId, userUpdateSchema, acceptLanguage, options).then((request) => request(axios, basePath));
        },
        /**
         * Endpoint gets all users.  Makes pagination, search and sorting of records.  Please provide:  - **page**  number of page we want to get  - **page_size**  length of records per page  - **search_line**  helps to find rows which contains search line  - **sort**  define by which field sort rows  - **direction**  determines in which direction to sort  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
         * @summary Users Datatable
         * @param {any} [searchLine] 
         * @param {any} [sort] 
         * @param {any} [direction] 
         * @param {any} [page] 
         * @param {any} [pageSize] 
         * @param {any} [acceptLanguage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersDatatable(searchLine?: any, sort?: any, direction?: any, page?: any, pageSize?: any, acceptLanguage?: any, options?: any): AxiosPromise<PaginatedResponseSchemaUserOutSchema> {
            return localVarFp.usersDatatable(searchLine, sort, direction, page, pageSize, acceptLanguage, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteUserById operation in UsersApi.
 * @export
 * @interface UsersApiDeleteUserByIdRequest
 */
export interface UsersApiDeleteUserByIdRequest {
    /**
     * 
     * @type {any}
     * @memberof UsersApiDeleteUserById
     */
    readonly userId: any

    /**
     * 
     * @type {any}
     * @memberof UsersApiDeleteUserById
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for getUserById operation in UsersApi.
 * @export
 * @interface UsersApiGetUserByIdRequest
 */
export interface UsersApiGetUserByIdRequest {
    /**
     * 
     * @type {any}
     * @memberof UsersApiGetUserById
     */
    readonly userId: any

    /**
     * 
     * @type {any}
     * @memberof UsersApiGetUserById
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for updateUserById operation in UsersApi.
 * @export
 * @interface UsersApiUpdateUserByIdRequest
 */
export interface UsersApiUpdateUserByIdRequest {
    /**
     * 
     * @type {any}
     * @memberof UsersApiUpdateUserById
     */
    readonly userId: any

    /**
     * 
     * @type {UserUpdateSchema}
     * @memberof UsersApiUpdateUserById
     */
    readonly userUpdateSchema: UserUpdateSchema

    /**
     * 
     * @type {any}
     * @memberof UsersApiUpdateUserById
     */
    readonly acceptLanguage?: any
}

/**
 * Request parameters for usersDatatable operation in UsersApi.
 * @export
 * @interface UsersApiUsersDatatableRequest
 */
export interface UsersApiUsersDatatableRequest {
    /**
     * 
     * @type {any}
     * @memberof UsersApiUsersDatatable
     */
    readonly searchLine?: any

    /**
     * 
     * @type {any}
     * @memberof UsersApiUsersDatatable
     */
    readonly sort?: any

    /**
     * 
     * @type {any}
     * @memberof UsersApiUsersDatatable
     */
    readonly direction?: any

    /**
     * 
     * @type {any}
     * @memberof UsersApiUsersDatatable
     */
    readonly page?: any

    /**
     * 
     * @type {any}
     * @memberof UsersApiUsersDatatable
     */
    readonly pageSize?: any

    /**
     * 
     * @type {any}
     * @memberof UsersApiUsersDatatable
     */
    readonly acceptLanguage?: any
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **404**: Error: Conflict.       Причини:           1) Не знайдено: немає збігів користувачів            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Delete User By Id
     * @param {UsersApiDeleteUserByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUserById(requestParameters: UsersApiDeleteUserByIdRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).deleteUserById(requestParameters.userId, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Register new user.  Please provide:   - **Request body**  data for registration new user  Returns:   - **200**: Success response with the data.   - **404**: Error: Conflict.       Причини:           1) Не знайдено: немає збігів користувачів            на заданному запиті.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Get User By Id
     * @param {UsersApiGetUserByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUserById(requestParameters: UsersApiGetUserByIdRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).getUserById(requestParameters.userId, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update user by id.  Please provide:   - **Request body**  data for updating user  Returns:   - **200**: Success response with the data.   - **404**: Error: Conflict.       Причини:           1) Не знайдено: немає збігів користувачів            на заданному запиті.   - **422**: Error: Unprocessable Entity.     Причини:           1) Введено некоректний номер телефону           2) Ім\'я та прізвище повинно починатися з великої літери            (наступні маленькі), доступна кирилиця,            доступні спецсимволи(\'-)   - **500**: Internal server error if an unexpected error occurs.
     * @summary Update User By Id
     * @param {UsersApiUpdateUserByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUserById(requestParameters: UsersApiUpdateUserByIdRequest, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).updateUserById(requestParameters.userId, requestParameters.userUpdateSchema, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Endpoint gets all users.  Makes pagination, search and sorting of records.  Please provide:  - **page**  number of page we want to get  - **page_size**  length of records per page  - **search_line**  helps to find rows which contains search line  - **sort**  define by which field sort rows  - **direction**  determines in which direction to sort  Returns:   - **200**: Success response with the data.   - **422**: Error: Unprocessable Entity.   - **500**: Internal server error if an unexpected error occurs.
     * @summary Users Datatable
     * @param {UsersApiUsersDatatableRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersDatatable(requestParameters: UsersApiUsersDatatableRequest = {}, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersDatatable(requestParameters.searchLine, requestParameters.sort, requestParameters.direction, requestParameters.page, requestParameters.pageSize, requestParameters.acceptLanguage, options).then((request) => request(this.axios, this.basePath));
    }
}


